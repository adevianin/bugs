{"version":3,"file":"domainWorker.js","mappings":";;;;;;;;;;;;;;;AAA4D;;AAE5D,mCAAmC,qEAAmB;;AAEtD;;;;;;;;;;;;;;;;;ACJ4D;;AAE5D,oCAAoC,qEAAmB;;AAEvD;;;;;;;;;;;;;;;;ACJA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACP4D;;AAE5D,uCAAuC,qEAAmB;;AAE1D;;;;;;;;;;;;;;;;;;;;;ACJiE;AAChB;AAC6B;AACR;AACE;;AAExE,6BAA6B,0DAAW;;AAExC;AACA;AACA;AACA;AACA;AACA,sEAAsE,GAAG;AACzE;AACA;;AAEA;AACA,eAAe,2EAAkB;AACjC;AACA,KAAK;AACL;AACA,eAAe,2EAAkB;AACjC;AACA,KAAK;AACL;AACA,eAAe,2EAAkB;AACjC,KAAK;AACL;AACA,eAAe,2EAAkB;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,mBAAmB,2EAAkB;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,6BAA6B,gFAAqB;AAClD,uBAAuB,2EAAkB;AACzC,cAAc;AACd,uBAAuB,2EAAkB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA,qBAAqB;AACrB,UAAU;AACV,6BAA6B,8EAAoB;AACjD,yBAAyB;AACzB,cAAc;AACd,yBAAyB,uBAAuB,OAAO,2EAAkB;AACzE;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,qBAAqB,2EAAkB;AAC5D;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA,qBAAqB;AACrB,UAAU;AACV,6BAA6B,sFAAwB;AACrD,yBAAyB,qBAAqB,2EAAkB;AAChE,cAAc,sBAAsB,8EAAoB;AACxD,yBAAyB,qBAAqB,2EAAkB;AAChE,cAAc;AACd,yBAAyB,qBAAqB,2EAAkB;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,6BAA6B,sFAAwB;AACrD,uBAAuB,2EAAkB;AACzC,cAAc;AACd,uBAAuB,2EAAkB;AACzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,2EAAkB;AACzC;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,2EAAkB;AACzC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2EAAkB;AACrC;;AAEA;AACA;AACA;AACA,uBAAuB,2EAAkB;AACzC;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AC7LkF;AACF;AACU;AACN;;AAEpF;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,8BAA8B,4FAAoB;AAClD;AACA,8BAA8B,8FAAqB;AACnD;AACA,8BAA8B,oGAAwB;AACtD;AACA,8BAA8B,0FAAmB;AACjD;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;;AC1E8C;;AAE9C;AACA;AACA,wBAAwB,4DAAgB;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA,gDAAgD;AAChD,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACb0B;AAC0B;;AAEpD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,6CAAK,qBAAqB;AACtC;AACA;AACA,cAAc;AACd,oCAAoC,uDAAuD;AAC3F,kCAAkC,iDAAiD;AACnF,SAAS;AACT;;AAEA;AACA;AACA,YAAY,6CAAK,oBAAoB;AACrC;AACA;AACA,cAAc;AACd,oCAAoC,uDAAuD;AAC3F,kCAAkC,iDAAiD;AACnF,SAAS;AACT;;AAEA;AACA,kCAAkC,kEAAS;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1C2C;AACY;AACF;;AAErD,sBAAsB,mDAAU;;AAEhC;AACA;AACA,6CAA6C,iEAAW;AACxiBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACrNsC;AACI;AACF;AACJ;;;;;;;;;;;;;;;;;;;ACHA;AACa;AACI;;AAErD,sBAAsB,6CAAO;;AAE7B;AACA;AACA,oGAAoG,2DAAQ;AAC5G;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;;;;;ACjDoC;AACa;AACI;AACV;;AAE3C,uBAAuB,6CAAO;;AAE9B;AACA;AACA,oGAAoG,2DAAQ;AAC5G;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;AACA;AACA,mCAAmC,mDAAM;AACzC;AACA;AACA;;;;;;;;;;;;;;;;;;AC3FoC;AACa;;AAEjD,yBAAyB,6CAAO;;AAEhC;AACA;AACA,oGAAoG,2DAAQ;AAC5G;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtBoC;AACa;;AAEjD,wBAAwB,6CAAO;;AAE/B;AACA;AACA,oGAAoG,2DAAQ;AAC5G;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;ACvBoD;AACM;;AAE1D;;AAEA;AACA,0BAA0B,oEAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,oBAAoB;AAClE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACnGA;;AAEA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1D0D;;AAE1D,sBAAsB,oEAAY;;AAElC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChC0D;AAChB;AACS;;AAEnD;;AAEA;AACA,qBAAqB,mDAAM;AAC3B;AACA;;AAEA;AACA,0BAA0B,oEAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;AClC0D;AACN;;AAEpD;;AAEA;AACA,0BAA0B,oEAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD,2CAA2C;AAC3C;AACA;;AAEA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;;AAEA;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChBkD;;AAElD;;AAEA;AACA,yCAAyC,2DAAc;AACvD,yDAAyD,2DAAc;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;AChCiC;AACiB;AACE;;AAEpD,mBAAmB,2CAAM;AACzB;AACA;AACA,6CAA6C,0DAAW;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA,iBAAiB,6DAAY;AAC7B;AACA,iBAAiB,6DAAY;AAC7B;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA;AACA;AACA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,qCAAqC,6DAAY;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;ACrFkC;AACgB;;AAElD,uBAAuB,2CAAM;AAC7B;AACA,6CAA6C,0DAAW;AACxD;AACA;;;;;;;;;;;;;;;;;;;ACPiC;AACiB;AACE;;AAEpD,yBAAyB,2CAAM;AAC/B;AACA;AACA,6CAA6C,0DAAW;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;ACjEkD;AACR;;AAE1C,sBAAsB,mDAAU;;AAEhC;AACA,6CAA6C,0DAAW;AACxD;;AAEA;;;;;;;;;;;;;;;;;;ACT0D;AAChB;;AAE1C;;AAEA;AACA,qBAAqB,mDAAM;AAC3B;AACA;;AAEA;AACA,0BAA0B,oEAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;AC7BiC;AACmB;;AAEpD,yBAAyB,2CAAM;;AAE/B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,6DAAY;AACjD;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,qCAAqC,6DAAY;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;;;;;;ACnEkC;AACgB;AACE;AACpB;AACJ;;AAE5B,mBAAmB,2CAAM;;AAEzB;AACA,6CAA6C,0DAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,oBAAoB,yCAAK;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,kBAAkB,qCAAG;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;;AAEA;AACA;AACA,qCAAqC,6DAAY;AACjD;AACA,SAAS;AACT;AACA;;AAEA;;AAIC;;;;;;;;;;;;;;;;AClNwD;;AAEzD;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,oEAAY;AACtC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;AC9BkC;AACqB;;AAEvD,mBAAmB,2CAAM;;AAEzB;AACA,6CAA6C,iEAAW;AACxD;AACA;;;;;;;;;;;;;;;;;;;;;ACRkD;AACV;AACR;AACiB;AACQ;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,0DAAW;AAChD;;AAEA;AACA,qCAAqC,0DAAW;AAChD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4DAA4D,0DAAW;AACvE;;AAEA;AACA,8DAA8D,0DAAW;AACzE;;AAEA;AACA,oDAAoD,0DAAW;AAC/D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oDAAoD,0DAAW;AAC/D;;AAEA;AACA,oDAAoD,0DAAW;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,+DAAc;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kDAAkD,kDAAM;AACxD,kDAAkD,kDAAM;;AAExD,oCAAoC,2BAA2B;AAC/D,wCAAwC,2BAA2B;AACnE,6CAA6C,kDAAM;AACnD,6CAA6C,kDAAM;AACnD,iCAAiC,cAAc,GAAG,cAAc;AAChE,4CAA4C,yCAAK,iBAAiB,kDAAM,qBAAqB,kDAAM;AACnG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,KAAK;AAClC,mCAAmC,kDAAM;AACzC,oCAAoC,kDAAM;AAC1C,kBAAkB,MAAM,GAAG,OAAO;AAClC;AACA;;;;;;;;;;;;;;;;AC7QA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACLyD;;AAEzD,yBAAyB,kEAAe;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;AC/BkF;AACZ;AACjB;;AAErD,8BAA8B,gFAAW;;AAEzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,6BAA6B,4FAAoB;AACjD;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,uEAAuE,WAAW;AAClF;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA,kCAAkC;AAClC,uBAAuB;AACvB;AACA;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA,qCAAqC,+DAAU;AAC/C;;AAEA;AACA,qCAAqC,+DAAU;AAC/C;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACxDiE;AACR;AACF;AACJ;AACQ;AACH;AAChB;AAC0C;AACF;;AAEhF,4BAA4B,kEAAe;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,2EAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,iCAAiC;AAC9E,UAAU;AACV,6BAA6B,4FAAoB;AACjD;AACA,cAAc,sBAAsB,0FAAmB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,iCAAiC;AAC9E,UAAU;AACV,6BAA6B,4FAAoB;AACjD;AACA,cAAc,sBAAsB,0FAAmB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,iCAAiC;AAC9E,UAAU;AACV,6BAA6B,4FAAoB;AACjD;AACA,cAAc,sBAAsB,0FAAmB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,iCAAiC;AAC9E,UAAU;AACV,6BAA6B,4FAAoB;AACjD;AACA,cAAc,sBAAsB,0FAAmB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,iCAAiC;AAC9E,UAAU;AACV,6BAA6B,4FAAoB;AACjD;AACA,cAAc,sBAAsB,0FAAmB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,iCAAiC;AAC9E,UAAU;AACV,6BAA6B,4FAAoB;AACjD;AACA,cAAc,sBAAsB,0FAAmB;AACvD;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,iEAAW;AAC5D;AACA;AACA;AACA,mCAAmC,6DAAS;AAC5C,oBAAoB,yDAAQ;AAC5B;AACA;AACA;AACA;AACA,oBAAoB,yDAAQ;AAC5B,oBAAoB,yDAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,kCAAkC,kDAAM;AAC7D;AACA;AACA;AACA,yDAAyD,iEAAW;AACpE,mDAAmD,iEAAW;AAC9D;AACA,kCAAkC,kDAAM,4BAA4B,kDAAM;AAC1E,mDAAmD,+DAAc;AACjE,yCAAyC,+DAAc;AACvD;AACA;AACA;AACA;AACA,8BAA8B,qCAAqC,kDAAM,4DAA4D;AACrI;;AAEA;AACA,8BAA8B,+BAA+B,kDAAM,qDAAqD;AACxH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD,iEAAW;AAC9D,qBAAqB,gCAAgC,kDAAM,oCAAoC,kDAAM;;AAErG;AACA;;AAEA;AACA;AACA,kCAAkC,+BAA+B,kDAAM,uBAAuB;AAC9F,cAAc;AACd,mCAAmC,+BAA+B,kDAAM,wCAAwC;AAChH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA,+BAA+B,kDAAM;AACrC,mBAAmB,kEAAgB;AACnC;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA,mBAAmB,kEAAgB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA,mBAAmB,kEAAgB;AACnC;;AAEA;AACA;;AAEA;AACA,iEAAiE,kDAAM;AACvE,2DAA2D,iEAAW;AACtE;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AC5U4C;AACJ;;AAExC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;;AAEA;AACA,QAAQ,0DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACjFyD;AACjB;AACG;AACF;AACI;AACqC;AACF;;AAEhF,0BAA0B,kEAAe;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,qBAAqB;AAClE,UAAU;AACV,6BAA6B,4FAAoB;AACjD;AACA,cAAc,sBAAsB,0FAAmB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,yBAAyB;AACtE,UAAU;AACV,6BAA6B,4FAAoB;AACjD;AACA,cAAc,sBAAsB,0FAAmB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kCAAkC,kDAAM;AACxC;AACA;;AAEA,aAAa,kDAAM;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,yDAAQ;AAC/B;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;;;;;;;;;;;;;;;;;ACpHyD;AACQ;;AAEjE,wCAAwC,kEAAe;;AAEvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,2EAAY;AAC7B;AACA;AACA,iBAAiB,2EAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AC3DyD;;AAEzD,0BAA0B,kEAAe;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AC9BuD;;AAEvD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iEAAW;AAC5B;AACA;AACA,iBAAiB,iEAAW;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,iEAAW;AAC5B;AACA;AACA,iBAAiB,iEAAW;AAC5B;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACxGwC;;AAExC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,sDAAsD;AAChG,cAAc;AACd,0CAA0C,0FAA0F;AACpwBAAwB,kDAAM;AAC9B;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kEAAkE;AACpH,UAAU;AACV,kDAAkD,mDAAmD;AACrqBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,qCAAqC;AACjG,SAAS;AACT;AACA,4DAA4D,iBAAiB;AAC7E,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACbjdA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzDuD;AACN;;AAEjD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,iEAAW;AAC5B;AACA,iBAAiB,iEAAW;AAC5B;AACA,iBAAiB,iEAAW;AAC5B;AACA,iBAAiB,iEAAW;AAC5B;AACA,iBAAiB,iEAAW;AAC5B;AACA,iBAAiB,iEAAW;AAC5B;AACA,iBAAiB,iEAAW;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,iBAAiB,2DAAQ;AACzB;AACA,iBAAiB,2DAAQ;AACzB;AACA,iBAAiB,2DAAQ;AACzB;AACA,iBAAiB,2DAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;AClPA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC3DA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kEAAkE,gBAAgB;AAClF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBiD;AACV;AACF;AACE;AACQ;AACV;AACY;AACJ;AACF;AAC6B;AACrC;AACQ;AACN;AACM;AACM;;AAEjD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,0DAAW;AAC5B;AACA,iBAAiB,0DAAW;AAC5B;AACA,iBAAiB,0DAAW;AAC5B;AACA,iBAAiB,0DAAW;AAC5B;AACA,iBAAiB,0DAAW;AAC5B;AACA,iBAAiB,0DAAW;AAC5B;AACA,iBAAiB,0DAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sDAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAU;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAI;AACvB;;AAEA;AACA,0BAA0B,qDAAO;AACjC,mBAAmB,gDAAK;AACxB;;AAEA;AACA,mBAAmB,qDAAO;AAC1B;;AAEA;AACA;AACA;AACA,sBAAsB,6CAAG;AACzB;AACA;;AAEA;AACA;AACA,wBAAwB,gDAAK;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAI;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2DAAM;AAC3B;AACA;AACA;;AAEA;AACA,iBAAiB,oDAAQ;AACzB;AACA;AACA,sEAAsE,2DAAM;AAC5E,2BAA2B,iDAAQ;AACnC;AACA,iBAAiB,oDAAQ;AACzB,2BAA2B,mDAAU;AACrC;AACA,iBAAiB,oDAAQ;AACzB,2BAA2B,kDAAS;AACpC;AACA,iBAAiB,oDAAQ;AACzB,2BAA2B,gDAAO;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAI;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAS;AAC5B;;AAEA;;;;;;;;;;;;;;;;;ACjLgE;;AAEhE;AACA,OAAO,2EAAkB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC/DA;;AAEA;AACA;AACA;;AAEA;AACA,wDAAwD,OAAO;AAC/D;;AAEA;AACA,wDAAwD,OAAO;AAC/D;AACA,SAAS;AACT;;AAEA;AACA,wDAAwD,OAAO;AAC/D;AACA,SAAS;AACT;;AAEA;AACA,wDAAwD,OAAO;AAC/D;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;AC3BA;;AAEA;AACA;AACA;;AAEA;AACA,4DAA4D,UAAU,eAAe,aAAa;AAClG;;AAEA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA,SAAS;AACT;;AAEA;AACA,4DAA4D,UAAU;AACtE;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;AC1DA;;AAEA;AACA;AACA;;AAEA;AACA,wDAAwD,OAAO;AAC/D;AACA;AACA,SAAS;AACT;;AAEA;AACA,wDAAwD,OAAO,QAAQ,MAAM;AAC7E;AACA,SAAS;AACT;;AAEA;AACA,wDAAwD,OAAO,QAAQ,MAAM;AAC7E;AACA,SAAS;AACT;;AAEA;AACA,wDAAwD,OAAO,QAAQ,MAAM;AAC7E;;AAEA;AACA,wDAAwD,OAAO,QAAQ,MAAM;AAC7E;;AAEA;AACA,wDAAwD,OAAO,UAAU,QAAQ;AACjF;;AAEA;AACA,wDAAwD,OAAO;AAC/D;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;;AC3CA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzB0D;;AAE1D;;AAEA;AACA,0BAA0B,oEAAY;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACNgC;AACI;AACF;AACI;AACS;;AAE/C;AACA,QAAQ,gDAAW;AACnB,OAAO,+CAAU;AACjB,SAAS,iDAAY;AACrB;;AAEA,iDAAK;AACL;AACA;AACA,yCAAyC,MAAM;AAC/C,MAAM;AACN;AACA;AACA,8CAA8C,MAAM;AACpD;AACA,CAAC;;AAED,sCAAsC,OAAO;;AAE7C,sCAAsC,iDAAK;;AAE3C,iEAAe;AACf;AACA,eAAe,iDAAK;;AAEpB,WAAW,QAAQ;AACnB;AACA;;AAEA;;AAEA,oBAAoB,YAAY;AAChC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,oBAAoB,2DAAU,qBAAqB,GAAG;AACtD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,yCAAyC,IAAI;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,2DAAU;AAC1B;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AC9E2C;AACZ;AACe;AACW;AACJ;AACH;AAC6D;AACxD;AACjB;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA,qCAAqC,0DAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA,CAAC;;AAED;;AAEA;AACA,aAAa,iDAAK;;;AAGlB;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,iDAAK;AAChD;AACA,kBAAkB,2DAAU,mBAAmB,KAAK,qBAAqB,2DAAU;AACnF,OAAO;AACP,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;;AAEA,KAAK,iDAAK;AACV;AACA;;AAEA,KAAK,iDAAK;AACV,iCAAiC,0DAAQ;AACzC;AACA;AACA,KAAK;AACL;AACA;;AAEA,KAAK,iDAAK,4BAA4B,iDAAK;AAC3C;AACA;;AAEA,KAAK,iDAAK;AACV;AACA;;AAEA,KAAK,iDAAK;AACV;AACA;AACA;;AAEA;AACA,iBAAiB,iDAAK;;AAEtB;AACA;;AAEA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,EAAE,qEAAa;;AAEnB;;AAEA,uBAAuB,sEAAc;;AAErC;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA,UAAU,iDAAK;AACf;AACA;;AAEA;AACA,oCAAoC,wFAAsB;AAC1D;AACA,UAAU,sFAAoB,CAAC,gFAAc;AAC7C;;AAEA,eAAe,oEAAW;AAC1B;AACA;;AAEA,SAAS,iDAAK;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP,oCAAoC,iDAAK;;AAEzC,wDAAwD,wFAAsB;AAC9E;AACA,QAAQ,sFAAoB,CAAC,gFAAc;AAC3C;;AAEA;AACA,QAAQ,oEAAW;AACnB;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA,uCAAuC,iDAAK;;AAE5C;;AAEA;AACA,MAAM,2DAAM;AACZ;AACA,iBAAiB,6DAAY;AAC7B;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,IAAI;AACJ;;AAEA;AACA;AACA,YAAY,2DAAU,kBAAkB,2DAAU;AAClD;AACA;AACA;AACA;AACA;;AAEA,UAAU,2DAAU;AACpB;AACA,CAAC,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AClO+B;AACO;AACsB;AAChB;AACQ;AACC;AACZ;AACO;AACqB;AAChB;;AAExD;;AAEA,iEAAe;AACf;AACA,oBAAoB,qEAAa;AACjC;AACA,2BAA2B,6DAAY;AACvC,SAAS,oDAAoD;AAC7D;AACA;AACA;;AAEA;AACA,oCAAoC;AACpC,wCAAwC;;AAExC;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,2DAAM;AACZ;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,2DAAU,oBAAoB,2DAAU;;AAEzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,2DAAU,kBAAkB,2DAAU;;AAEvD;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,iEAAoB;AACvE;AACA;AACA;AACA,iBAAiB,2DAAU;AAC3B;AACA,2CAA2C,2DAAU,aAAa,2DAAU;AAC5E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM,iDAAK;AACX;AACA,OAAO;AACP;;AAEA;AACA,SAAS,iDAAK;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,sFAAoB;AAChE;AACA;;AAEA;AACA;AACA,wCAAwC,sFAAoB;;AAE5D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gEAAa;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,qEAAa;;AAElC,oBAAoB,0DAAQ;AAC5B,iBAAiB,2DAAU,2CAA2C,2DAAU;AAChF;AACA;;;AAGA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpMY;;AAEkB;AACM;AACD;AACY;AACL;AACc;AACH;AACJ;AACN;AACN;AACW;AACH;AACL;AACY;AACH;AACJ;AACW;;AAEzD;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,OAAO;AACpB;AACA;AACA,sBAAsB,sDAAK;AAC3B,mBAAmB,4DAAI,CAAC,sDAAK;;AAE7B;AACA,EAAE,iDAAK,kBAAkB,sDAAK,sBAAsB,iBAAiB;;AAErE;AACA,EAAE,iDAAK,kCAAkC,iBAAiB;;AAE1D;AACA;AACA,0BAA0B,gEAAW;AACrC;;AAEA;AACA;;AAEA;AACA,6BAA6B,0DAAQ;;AAErC;AACA,cAAc,sDAAK;;AAEnB;AACA,sBAAsB,gEAAa;AACnC,oBAAoB,8DAAW;AAC/B,iBAAiB,2DAAQ;AACzB,gBAAgB,iDAAO;AACvB,mBAAmB,8DAAU;;AAE7B;AACA,mBAAmB,4DAAU;;AAE7B;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,2DAAM;;AAErB;AACA,qBAAqB,iEAAY;;AAEjC;AACA,oBAAoB,4DAAW;;AAE/B,qBAAqB,8DAAY;;AAEjC,4BAA4B,uEAAc,CAAC,iDAAK;;AAEhD,mBAAmB,8DAAQ;;AAE3B,uBAAuB,mEAAc;;AAErC;;AAEA;AACA,iEAAe,KAAK;;;;;;;;;;;;;;;;ACxFP;;AAEkC;;AAE/C;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,yDAAa;AACtC;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;ACtId;;AAEkC;AACf;;AAEhC;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA,EAAE,2DAAU,oDAAoD,2DAAU;AAC1E;AACA;;AAEA,iDAAK,yBAAyB,2DAAU;AACxC;AACA,CAAC;;AAED,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;ACxBhB;;AAEE;AACf;AACA;;;;;;;;;;;;;;;;;;;;;;;ACJa;;AAEqB;AACY;AACW;AACN;AACR;AACI;AACC;AACH;;AAE7C,mBAAmB,6DAAS;;AAE5B;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB,8DAAkB;AACrC,oBAAoB,8DAAkB;AACtC;AACA;;AAEA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,aAAa,SAAS;AACtB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA,aAAa,2DAAW;;AAExB,WAAW,yCAAyC;;AAEpD;AACA,MAAM,6DAAS;AACf;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,UAAU,iDAAK;AACf;AACA;AACA;AACA,QAAQ;AACR,QAAQ,6DAAS;AACjB;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA,IAAI,6DAAS;AACb;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,oCAAoC,iDAAK;AACzC;AACA;AACA;;AAEA,eAAe,iDAAK;AACpB;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,wDAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,qBAAqB,2DAAe;AACpC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,2DAAe;AAC/B,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,2DAAW;AACxB,qBAAqB,6DAAa;AAClC,WAAW,gEAAQ;AACnB;AACA;;AAEA;AACA,iDAAK;AACL;AACA;AACA,wBAAwB,2DAAW,aAAa;AAChD;AACA;AACA,yBAAyB;AACzB,KAAK;AACL;AACA,CAAC;;AAED,iDAAK;AACL;;AAEA;AACA;AACA,0BAA0B,2DAAW,aAAa;AAClD;AACA;AACA;AACA,UAAU,IAAI;AACd;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA,CAAC;;AAED,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;ACjPR;;AAEmB;;AAEhC;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iDAAK;AACnB;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,CAAC;;AAED;AACA,kDAAkD,YAAY;;AAE9D;AACA;AACA;;AAEA,EAAE,iDAAK;AACP;AACA,GAAG;AACH;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;ACtGb;;AAEmB;AACsB;;AAEtD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS,iDAAK;AACd;;AAEA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,MAAM,iDAAK;AACX;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,iDAAK;;AAEZ,MAAM,iDAAK;AACX;AACA;;AAEA,MAAM,iDAAK;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,uBAAuB,iDAAK;;AAE5B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,iDAAK;;AAEvB;AACA;AACA;AACA;;AAEA;AACA,MAAM,iDAAK;;AAEX,QAAQ,iDAAK;AACb;AACA,MAAM,QAAQ,iDAAK;AACnB,iBAAiB,oEAAY;AAC7B,MAAM,SAAS,iDAAK;AACpB;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB,iDAAK;;AAEvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY,iDAAK;AACjB;AACA;;AAEA,YAAY,iDAAK;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB,iDAAK;;AAEvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,iDAAK;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ,iDAAK;AACb;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,iDAAK;AACT,kBAAkB,iDAAK;;AAEvB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI,iDAAK;AACT,sEAAsE,iDAAK;AAC3E,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAI,iDAAK;;AAET;AACA;AACA;;AAEA;;AAEA;AACA,iDAAK,6CAA6C,MAAM;AACxD,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,iDAAK;;AAEL,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;AC7Sf;;AAEqB;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA,eAAe;AACf;AACA;AACA,IAAI,iDAAK;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;;ACtErB;;AAE2C;AACJ;;AAEpD;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACe;AACf,uBAAuB,qEAAa;AACpC;AACA,WAAW,mEAAW;AACtB;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrBa;;AAEkC;AACF;AACD;AACW;AACJ;AACJ;;AAE/C;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,gEAAa;AAC3B;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,SAAS;AACtB;AACe;AACf;;AAEA,mBAAmB,6DAAY;;AAE/B;AACA,gBAAgB,yDAAa;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,6DAAQ,8BAA8B,0DAAQ;;AAEhE;AACA;;AAEA;AACA,oBAAoB,yDAAa;AACjC;AACA;AACA;AACA;;AAEA,uBAAuB,6DAAY;;AAEnC;AACA,GAAG;AACH,SAAS,+DAAQ;AACjB;;AAEA;AACA;AACA,+BAA+B,yDAAa;AAC5C;AACA;AACA;AACA;AACA,kCAAkC,6DAAY;AAC9C;AACA;;AAEA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;AChFa;;AAEmB;AACa;;AAE7C,oDAAoD,wDAAY,KAAK,WAAW;;AAEhF;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACe;AACf;AACA;AACA;;AAEA;AACA,QAAQ,iDAAK,0BAA0B,iDAAK;AAC5C,aAAa,iDAAK,aAAa,SAAS;AACxC,MAAM,SAAS,iDAAK;AACpB,aAAa,iDAAK,SAAS;AAC3B,MAAM,SAAS,iDAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,iDAAK;AACd;AACA,MAAM,UAAU,iDAAK;AACrB;AACA;AACA;;AAEA;AACA;AACA,SAAS,iDAAK;AACd;AACA;AACA;;AAEA;AACA;AACA,SAAS,iDAAK;AACd;AACA,MAAM,UAAU,iDAAK;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iDAAK,qCAAqC;AAC5C;AACA;AACA,KAAK,iDAAK;AACV,GAAG;;AAEH;AACA;;;;;;;;;;;;;;;;ACzGa;;AAE4B;;AAEzC;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACe;AACf;AACA;AACA;AACA,IAAI;AACJ,eAAe,sDAAU;AACzB;AACA,OAAO,sDAAU,kBAAkB,sDAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1Ba;;AAEqB;AACU;AACO;;AAEnD;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,SAAS;AACpB;AACA,aAAa,GAAG;AAChB;AACe;AACf,yBAAyB,0DAAQ;AACjC;AACA,kBAAkB,6DAAY;AAC9B;;AAEA,EAAE,iDAAK;AACP;AACA,GAAG;;AAEH;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;AC3Ba;;AAEmB;AACe;AACM;AACH;AACY;AAClB;AACc;;AAE1D;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB;AACA,aAAa,QAAQ;AACrB;AACA;AACA,MAAM,iDAAK;AACX;AACA;AACA,aAAa,iDAAK;AAClB,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,gBAAgB,wDAAoB;;AAEpC;;AAEA;AACA;AACA;AACA,4BAA4B,iDAAK;;AAEjC,2BAA2B,iDAAK;AAChC;AACA;;AAEA,uBAAuB,iDAAK;;AAE5B;AACA,iDAAiD,sEAAc;AAC/D;;AAEA,QAAQ,iDAAK;AACb,MAAM,iDAAK;AACX,MAAM,iDAAK;AACX,MAAM,iDAAK;AACX,MAAM,iDAAK;AACX,MAAM,iDAAK;AACX;AACA;AACA;AACA,QAAQ,iDAAK;AACb;AACA;AACA,QAAQ,iDAAK;AACb,gEAAgE;AAChE;AACA;;AAEA;;AAEA;AACA;AACA,eAAe,wEAAgB;AAC/B;;AAEA,wBAAwB,iDAAK;AAC7B;;AAEA,eAAe,kEAAU;AACzB,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA,QAAQ,iDAAK,qBAAqB,iDAAK;AACvC;AACA;;AAEA,gBAAgB,iDAAK;AACrB;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA,kBAAkB,2DAAU,SAAS,2DAAU;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc,0DAAQ;AACtB,UAAU,0DAAQ;AAClB,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAK;AACL;AACA,CAAC;;AAED,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;AChKX;;AAEb,iEAAe;AACf;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACNK;;;;;;;;;;;;;;;ACAM;;AAE4B;;AAEzC;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,WAAW,qBAAqB;AAChC;AACA,aAAa;AACb;AACA;AACA;;AAEA,YAAY,0DAAU;AACtB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,oBAAoB,EAAC;;;;;;;;;;;;;;;ACzDpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;ACtEjB;;AAEE;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNa;;AAEmB;AACsC;;AAEtE;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,oBAAoB;AAC/B;AACA,aAAa,QAAQ;AACrB;AACe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,iDAAK;AACX;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ,uBAAuB,iDAAK;AAC5B;AACA,UAAU,wEAAoB;AAC9B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACpEa;;AAEb;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACe;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACduD;AACR;AACf;;AAEhC;AACA,SAAS,QAAQ;;AAEjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAU,aAAa,gEAAa;AAC5E;AACA;;AAEA;AACA;AACA,kBAAkB,2DAAU,YAAY,SAAS,iBAAiB,2DAAU;AAC5E,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA,WAAW,QAAQ;;AAEnB,+BAA+B,iDAAK;;AAEpC;AACA;AACA;;AAEA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;;AC/CI;AACU;;AAE5C,iEAAe,0DAAQ;;AAEvB;AACA;AACA;AACA;;AAEA,MAAM,iDAAK;;AAEX,MAAM,iDAAK;;AAEX,MAAM,iDAAK;;AAEX;;AAEA,uCAAuC;AACvC,KAAK;;AAEL;AACA,0DAA0D,wBAAwB;AAClF;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,KAAK;AACL;AACA,GAAG,EAAC;;;;;;;;;;;;;;;;;ACxCS;;AAEmB;;AAEhC;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iDAAK;AACd;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,4BAA4B;AACzC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oBAAoB,iDAAK;;AAEzB;AACA,UAAU,iDAAK;AACf;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA,0BAA0B,iDAAK;AAC/B;AACA;;AAEA;;AAEA,kBAAkB,iDAAK;AACvB;AACA;;AAEA;AACA;;AAEA,MAAM,iDAAK,yBAAyB,iDAAK;AACzC;;AAEA,IAAI,iDAAK;AACT;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;AC9FjB;;AAEb;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,SAAS;AACtB;AACe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACda;;AAEqB;;AAElC;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACe;AACf,SAAS,iDAAK;AACd;;;;;;;;;;;;;;;;ACb4C;;AAE5C,iEAAe,0DAAQ;AACvB,qBAAqB,0DAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,UAAU,0DAAQ;AAClB,EAAE,0DAAQ,qCAAqC,0DAAQ;AACvD,cAAc,EAAC;;;;;;;;;;;;;;;ACbf;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;ACDP;;AAEqB;;AAElC;AACA;AACA,0BAA0B,iDAAK;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA,iEAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACtDW;;AAEE;AACf,0BAA0B,KAAK;AAC/B;AACA;;;;;;;;;;;;;;;;;;;;ACL2C;AACN;AACL;;AAEzB;AACP;AACA,uBAAuB,2DAAW;;AAElC,SAAS,wDAAQ;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO,4CAA4C,iDAAK;;;;;;;;;;;;;;;;;;;;;;;AC3CZ;AACZ;AACmB;AAChB;AACkB;AACJ;AACE;AACd;;AAErC,iEAAe;AACf,oBAAoB,gEAAW,GAAG;;AAElC,OAAO,oEAAoE;;AAE3E,gCAAgC,6DAAY;;AAE5C,kBAAkB,wDAAQ,CAAC,kEAAa;;AAExC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAM,iDAAK;AACX,QAAQ,0DAAQ,0BAA0B,0DAAQ;AAClD,yCAAyC;AACzC,MAAM;AACN;AACA,kEAAkE;AAClE,gFAAgF;AAChF;AACA;;AAEA;AACA;AACA;;AAEA,MAAM,0DAAQ;AACd,qBAAqB,iDAAK;;AAE1B,qDAAqD,+DAAe;AACpE;AACA,4DAA4D,mDAAO;;AAEnE;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;;;;;;;ACvDY;;AAEb;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;ACtDd;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,WAAW,UAAU;AACrB;AACA,aAAa;AACb;AACe;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;AC3CX;;AAEmB;AACe;AAC/C;AACoE;;AAEpE;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA,SAAS,iDAAK,yBAAyB,iDAAK;AAC5C;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA,SAAS,iDAAK;AACd;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA,aAAa;AACb;AACA;AACA,SAAS,iDAAK;AACd;;AAEA,mBAAmB,iDAAK,cAAc,iDAAK,IAAI;AAC/C;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,UAAU;AACrB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,UAAU;AACrB;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA,OAAO,iDAAK;AACZ;AACA;;AAEA;AACA,8BAA8B,0EAAgB;;AAE9C;AACA,YAAY,iDAAK;AACjB;AACA;AACA;AACA,GAAG;AACH;AACA,YAAY,iDAAK;AACjB,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAK;;AAEhC,OAAO,iDAAK;AACZ;AACA;;AAEA;AACA;;AAEA,QAAQ,iDAAK;AACb;AACA;;AAEA,oBAAoB,iDAAK;AACzB,gBAAgB,2DAAU;AAC1B;;AAEA,QAAQ,iDAAK,yBAAyB,iDAAK;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,eAAe;AAC5B,aAAa,sBAAsB;AACnC,YAAY;AACZ;AACA,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA,UAAU,iDAAK,kBAAkB;AACjC;AACA;AACA;AACA;AACA,QAAQ;AACR,SAAS,iDAAK;AACd,UAAU,iDAAK,sBAAsB,iDAAK,gCAAgC,iDAAK;AAC/E;AACA;AACA;;AAEA;AACA,YAAY,iDAAK;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,QAAQ,iDAAK;;AAEb;AACA;AACA;;AAEA;;AAEA,IAAI,iDAAK;AACT,uBAAuB,iDAAK;AAC5B,sBAAsB,iDAAK;AAC3B;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,OAAO,iDAAK;AACZ;AACA;;AAEA;;AAEA;AACA;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;AC1Nb;;AAEmB;AACS;AACG;;AAE7B;AACf,SAAS,0DAAU,WAAW,0DAAQ;AACtC;AACA,UAAU,0DAAQ,WAAW,iDAAK;AAClC;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;AChBO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,aAAa;;AAE5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;ACtFa;;AAE0B;AACQ;;AAE/C;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACA,aAAa;AACb;AACA;AACA;AACA,wBAAwB,iDAAO;AAC/B;;AAEA;AACA;AACA;AACA,gBAAgB,2DAAU;AAC1B;AACA,QAAQ,2DAAU;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,KAAK,6BAA6B,gBAAgB;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,2DAAU,8BAA8B,2DAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAU,yCAAyC,2DAAU;AAC/E;AACA;AACA;AACA;AACA,gBAAgB,2DAAU,0BAA0B,2DAAU;AAC9D;AACA;AACA;;AAEA,iEAAe;AACf;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;AClGU;;AAEZ,iEAAe,yCAAyC;;;;;;;;;;;;;;;ACF3C;;AAEb,iEAAe,iDAAiD,EAAC;;;;;;;;;;;;;;;;ACFpD;;AAE+D;AAC5E,iEAAe,2DAA2D,wEAAoB,EAAC;;;;;;;;;;;;;;;;;;ACHrC;AACd;AACR;;AAEpC,iEAAe;AACf;AACA;AACA,mBAAmB;AACnB,YAAY;AACZ,QAAQ;AACR,GAAG;AACH;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;ACZF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAQC;;;;;;;;;;;;;;;;;AClDsC;AACI;;AAE3C,iEAAe;AACf,KAAK,6CAAK;AACV,KAAK,sDAAQ;AACb,CAAC;;;;;;;;;;;;;;;;ACNY;;AAEwB;;AAErC;;AAEA,OAAO,UAAU;AACjB,OAAO,gBAAgB;;AAEvB;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,SAAS;AACtB;AACA,OAAO,SAAS;;AAEhB;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;;AAGA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,UAAU;AACrB;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA,2BAA2B,oBAAoB,IAAI;AACnD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS,GAAG,SAAS;AAC5C,4BAA4B;AAC5B;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,kCAAkC;AAClC,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB;AACA,gCAAgC,WAAW,IAAI;AAC/C;AACA;AACA,eAAe,4DAAI;AACnB,MAAM;AACN;AACA;AACA,GAAG,GAAG,WAAW;AACjB;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,kBAAkB;AAC7B,WAAW,UAAU;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,UAAU;AACrB;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,eAAe;;AAEzC;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,GAAG,WAAW,cAAc;AAC5B,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;ACjuBK;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,YAAY;AACZ;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;;;;;;;UCnBD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNoD;AACC;AACM;AAClB;AACI;AACN;AAC8B;;AAEE;AACO;AACpB;AACN;AACQ;AACE;AACJ;AAC4B;AAC5B;AACF;;AAEe;;AAES;AACD;;AAEZ;AACgB;AAChB;AACP;;AAE5D,oBAAoB,8DAAS;AAC7B,2BAA2B,oEAAgB;AAC3C,qBAAqB,+DAAU;AAC/B,kBAAkB,kDAAO;AACzB,oBAAoB,sDAAS;AAC7B,iBAAiB,gDAAM;AACvB,gCAAgC,8EAAqB;;AAErD,mBAAmB,oEAAY;AAC/B,uBAAuB,+DAAY;AACnC;AACA,iBAAiB,kFAAkB;AACnC,uBAAuB,uEAAY;AACnC,yBAAyB,iFAAc;AACvC,wBAAwB,yEAAa;AACrC,sBAAsB,qEAAW;AACjC,oCAAoC,iGAAyB;AAC7D,sBAAsB,qEAAW;AACjC,qBAAqB,mEAAU;AAC/B,gCAAgC,wFAAqB;;AAErD,2BAA2B,0FAAgB;AAC3C,2BAA2B,0FAAgB;;AAE3C,2BAA2B,8EAAgB;AAC3C,2BAA2B,8EAAgB;AAC3C,mCAAmC,8FAAwB;AAC3D,IAAI,sEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://bugs/./common/domain/errors/conflictRequestError.js","webpack://bugs/./common/domain/errors/forbiddenRequestError.js","webpack://bugs/./common/domain/errors/genericRequestError.js","webpack://bugs/./common/domain/errors/unauthorizedRequestError.js","webpack://bugs/./common/domain/service/accountService.js","webpack://bugs/./common/domain/service/base/baseService.js","webpack://bugs/./common/messages/messageIds.js","webpack://bugs/./common/sync/accountApi.js","webpack://bugs/./common/utils/eventEmitter.js","webpack://bugs/./common/utils/getCookie.js","webpack://bugs/./common/utils/requester.js","webpack://bugs/./gameApp/src/domain/consts.js","webpack://bugs/./gameApp/src/domain/entity/action/actionTypes.js","webpack://bugs/./gameApp/src/domain/entity/ant/baseAnt.js","webpack://bugs/./gameApp/src/domain/entity/ant/index.js","webpack://bugs/./gameApp/src/domain/entity/ant/maleAnt.js","webpack://bugs/./gameApp/src/domain/entity/ant/queenAnt.js","webpack://bugs/./gameApp/src/domain/entity/ant/warriorAnt.js","webpack://bugs/./gameApp/src/domain/entity/ant/workerAnt.js","webpack://bugs/./gameApp/src/domain/entity/antColony.js","webpack://bugs/./gameApp/src/domain/entity/chunk.js","webpack://bugs/./gameApp/src/domain/entity/climate.js","webpack://bugs/./gameApp/src/domain/entity/egg.js","webpack://bugs/./gameApp/src/domain/entity/entity.js","webpack://bugs/./gameApp/src/domain/entity/genetic/chromosomesSet.js","webpack://bugs/./gameApp/src/domain/entity/genetic/genome.js","webpack://bugs/./gameApp/src/domain/entity/item.js","webpack://bugs/./gameApp/src/domain/entity/itemArea.js","webpack://bugs/./gameApp/src/domain/entity/itemSource.js","webpack://bugs/./gameApp/src/domain/entity/ladybug.js","webpack://bugs/./gameApp/src/domain/entity/larva.js","webpack://bugs/./gameApp/src/domain/entity/liveEntity.js","webpack://bugs/./gameApp/src/domain/entity/nest.js","webpack://bugs/./gameApp/src/domain/entity/nuptialEnvironment.js","webpack://bugs/./gameApp/src/domain/entity/tree.js","webpack://bugs/./gameApp/src/domain/entity/world.js","webpack://bugs/./gameApp/src/domain/enum/antTypes.js","webpack://bugs/./gameApp/src/domain/enum/eggStates.js","webpack://bugs/./gameApp/src/domain/enum/entityTypes.js","webpack://bugs/./gameApp/src/domain/enum/errorCodes.js","webpack://bugs/./gameApp/src/domain/enum/itemTypes.js","webpack://bugs/./gameApp/src/domain/enum/season_types.js","webpack://bugs/./gameApp/src/domain/service/antService.js","webpack://bugs/./gameApp/src/domain/service/base/baseGameService.js","webpack://bugs/./gameApp/src/domain/service/colonyService.js","webpack://bugs/./gameApp/src/domain/service/messageHandlerService.js","webpack://bugs/./gameApp/src/domain/service/nestService.js","webpack://bugs/./gameApp/src/domain/service/nuptialEnvironmentService.js","webpack://bugs/./gameApp/src/domain/service/userService.js","webpack://bugs/./gameApp/src/domain/service/worldService.js","webpack://bugs/./gameApp/src/domain/worker/domainWorker.js","webpack://bugs/./gameApp/src/domain/worker/myStateCollector.js","webpack://bugs/./gameApp/src/domain/worker/serializers/colonySerializer.js","webpack://bugs/./gameApp/src/domain/worker/serializers/entitySerializer.js","webpack://bugs/./gameApp/src/domain/worker/viewPointManager.js","webpack://bugs/./gameApp/src/domain/worker/worldStepEventsCollector.js","webpack://bugs/./gameApp/src/domain/worldFactory.js","webpack://bugs/./gameApp/src/messages/messageIds.js","webpack://bugs/./gameApp/src/sync/antApi.js","webpack://bugs/./gameApp/src/sync/colonyApi.js","webpack://bugs/./gameApp/src/sync/nestApi.js","webpack://bugs/./gameApp/src/sync/nuptialEnvironmentApi.js","webpack://bugs/./gameApp/src/sync/serverConnection.js","webpack://bugs/./gameApp/src/utils/distance.js","webpack://bugs/./node_modules/axios/lib/adapters/adapters.js","webpack://bugs/./node_modules/axios/lib/adapters/fetch.js","webpack://bugs/./node_modules/axios/lib/adapters/xhr.js","webpack://bugs/./node_modules/axios/lib/axios.js","webpack://bugs/./node_modules/axios/lib/cancel/CancelToken.js","webpack://bugs/./node_modules/axios/lib/cancel/CanceledError.js","webpack://bugs/./node_modules/axios/lib/cancel/isCancel.js","webpack://bugs/./node_modules/axios/lib/core/Axios.js","webpack://bugs/./node_modules/axios/lib/core/AxiosError.js","webpack://bugs/./node_modules/axios/lib/core/AxiosHeaders.js","webpack://bugs/./node_modules/axios/lib/core/InterceptorManager.js","webpack://bugs/./node_modules/axios/lib/core/buildFullPath.js","webpack://bugs/./node_modules/axios/lib/core/dispatchRequest.js","webpack://bugs/./node_modules/axios/lib/core/mergeConfig.js","webpack://bugs/./node_modules/axios/lib/core/settle.js","webpack://bugs/./node_modules/axios/lib/core/transformData.js","webpack://bugs/./node_modules/axios/lib/defaults/index.js","webpack://bugs/./node_modules/axios/lib/defaults/transitional.js","webpack://bugs/./node_modules/axios/lib/env/data.js","webpack://bugs/./node_modules/axios/lib/helpers/AxiosURLSearchParams.js","webpack://bugs/./node_modules/axios/lib/helpers/HttpStatusCode.js","webpack://bugs/./node_modules/axios/lib/helpers/bind.js","webpack://bugs/./node_modules/axios/lib/helpers/buildURL.js","webpack://bugs/./node_modules/axios/lib/helpers/combineURLs.js","webpack://bugs/./node_modules/axios/lib/helpers/composeSignals.js","webpack://bugs/./node_modules/axios/lib/helpers/cookies.js","webpack://bugs/./node_modules/axios/lib/helpers/formDataToJSON.js","webpack://bugs/./node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack://bugs/./node_modules/axios/lib/helpers/isAxiosError.js","webpack://bugs/./node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack://bugs/./node_modules/axios/lib/helpers/null.js","webpack://bugs/./node_modules/axios/lib/helpers/parseHeaders.js","webpack://bugs/./node_modules/axios/lib/helpers/parseProtocol.js","webpack://bugs/./node_modules/axios/lib/helpers/progressEventReducer.js","webpack://bugs/./node_modules/axios/lib/helpers/resolveConfig.js","webpack://bugs/./node_modules/axios/lib/helpers/speedometer.js","webpack://bugs/./node_modules/axios/lib/helpers/spread.js","webpack://bugs/./node_modules/axios/lib/helpers/throttle.js","webpack://bugs/./node_modules/axios/lib/helpers/toFormData.js","webpack://bugs/./node_modules/axios/lib/helpers/toURLEncodedForm.js","webpack://bugs/./node_modules/axios/lib/helpers/trackStream.js","webpack://bugs/./node_modules/axios/lib/helpers/validator.js","webpack://bugs/./node_modules/axios/lib/platform/browser/classes/Blob.js","webpack://bugs/./node_modules/axios/lib/platform/browser/classes/FormData.js","webpack://bugs/./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js","webpack://bugs/./node_modules/axios/lib/platform/browser/index.js","webpack://bugs/./node_modules/axios/lib/platform/common/utils.js","webpack://bugs/./node_modules/axios/lib/platform/index.js","webpack://bugs/./node_modules/axios/lib/utils.js","webpack://bugs/./node_modules/nanoevents/index.js","webpack://bugs/webpack/bootstrap","webpack://bugs/webpack/runtime/define property getters","webpack://bugs/webpack/runtime/hasOwnProperty shorthand","webpack://bugs/webpack/runtime/make namespace object","webpack://bugs/./gameApp/src/domainWorkerStart.js"],"sourcesContent":["import { GenericRequestError } from \"./genericRequestError\";\n\nclass ConflictRequestError extends GenericRequestError {\n\n}\n\nexport {\n    ConflictRequestError\n}","import { GenericRequestError } from \"./genericRequestError\";\n\nclass ForbiddenRequestError extends GenericRequestError {\n\n}\n\nexport {\n    ForbiddenRequestError\n}","class GenericRequestError extends Error {\n\n    constructor(data) {\n        super();\n        this.data = data;\n    }\n\n}\n\nexport {\n    GenericRequestError\n}","import { GenericRequestError } from \"./genericRequestError\";\n\nclass UnauthorizedRequestError extends GenericRequestError {\n\n}\n\nexport {\n    UnauthorizedRequestError\n}","import { COMMON_MESSAGE_IDS } from \"@common/messages/messageIds\";\nimport { BaseService } from \"./base/baseService\";\nimport { UnauthorizedRequestError } from \"../errors/unauthorizedRequestError\";\nimport { ConflictRequestError } from \"../errors/conflictRequestError\";\nimport { ForbiddenRequestError } from \"../errors/forbiddenRequestError\";\n\nclass AccountService extends BaseService {\n\n    static MIN_USERNAME_LENGTH = 4;\n    static MAX_USERNAME_LENGTH = 50;\n    static USERNAME_REGEX = /^[a-zA-Z0-9_-]+$/;\n    static MIN_PASSWORD_LENGTH = 6;\n    static MAX_PASSWORD_LENGTH = 100;\n    static EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    static MIN_EMAIL_LENGTH = 4;\n    static MAX_EMAIL_LENGTH = 254;\n\n    static USERNAME_MIN_LENGTH_ERR = Object.freeze({\n        msgId: COMMON_MESSAGE_IDS.USERNAME_MIN_LENGTH_ERR,\n        minLength: AccountService.MIN_USERNAME_LENGTH\n    });\n    static USERNAME_MAX_LENGTH_ERR = Object.freeze({\n        msgId: COMMON_MESSAGE_IDS.USERNAME_MAX_LENGTH_ERR,\n        maxLength: AccountService.MAX_USERNAME_LENGTH\n    });\n    static USERNAME_INVALID_CHARS_ERR = Object.freeze({\n        msgId: COMMON_MESSAGE_IDS.USERNAME_INVALID_CHARS\n    });\n    static USERNAME_TAKEN_ERR = Object.freeze({\n        msgId: COMMON_MESSAGE_IDS.USERNAME_TAKEN\n    });\n    \n    constructor(accountApi) {\n        super();\n        this._accountApi = accountApi;\n    }\n\n    login(email, password) {\n        return this._requestHandler(() => this._accountApi.login(email, password));\n    }\n\n    logout() {\n        return this._accountApi.logout();\n    }\n\n    async register(username, email, password) {\n        return this._requestHandler(() => this._accountApi.register(username, email, password));\n    }\n\n    async resetPasswordRequest(email) {\n        try {\n            await this._requestHandler(() => this._accountApi.resetPasswordRequest(email));\n            return null;\n        } catch (e) {\n            return COMMON_MESSAGE_IDS.SOMETHING_WENT_WRONG;\n        }\n    }\n\n    async setNewPassword(newPassword, token, id) {\n        try {\n            await this._requestHandler(() => this._accountApi.setNewPassword(newPassword, token, id));\n            return null;\n        } catch (e) {\n            if (e instanceof ForbiddenRequestError) {\n                return COMMON_MESSAGE_IDS.RESET_PASSWORD_LINK_EXPIRED;\n            } else {\n                return COMMON_MESSAGE_IDS.SOMETHING_WENT_WRONG;\n            }\n        }\n    }\n\n    async changeUsername(newUsername) {\n        let usernameErr = await this.validateUsername(newUsername, false);\n        if (usernameErr) {\n            return { success: false, err: usernameErr };\n        }\n\n        try {\n            let data = await this._requestHandler(() => this._accountApi.changeUsername(newUsername));\n            return { success: true, userData: data.user };\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return { success: false, err: AccountService.USERNAME_TAKEN_ERR };\n            } else {\n                return { success: false, err: { msgId: COMMON_MESSAGE_IDS.SOMETHING_WENT_WRONG } };\n            }\n        }\n    }\n\n    async changeEmail(newEmail, password) {\n        if (!password) {\n            return { success: false, err: COMMON_MESSAGE_IDS.PASSWORD_NEEDED };\n        }\n\n        let emailErr = await this.validateEmail(newEmail, false);\n        if (emailErr) {\n            return { success: false, err: emailErr };\n        }\n\n        try {\n            let data = await this._requestHandler(() => this._accountApi.changeEmail(newEmail, password));\n            return { success: true, userData: data.user };\n        } catch (e) {\n            if (e instanceof UnauthorizedRequestError) {\n                return { success: false, err: COMMON_MESSAGE_IDS.PASSWORD_IS_NOT_VALID_EMAIL_NOT_CHANGED };\n            } else if (e instanceof ConflictRequestError) {\n                return { success: false, err: COMMON_MESSAGE_IDS.EMAIL_TAKEN };\n            } else {\n                return { success: false, err: COMMON_MESSAGE_IDS.SOMETHING_WENT_WRONG };\n            }\n        }\n    }\n\n    async changePassword(newPassword, oldPassword) {\n        try {\n            await this._requestHandler(() => this._accountApi.changePassword(newPassword, oldPassword));\n            return null;\n        } catch (e) {\n            if (e instanceof UnauthorizedRequestError) {\n                return COMMON_MESSAGE_IDS.OLD_PASSWORD_IS_NOT_VALID_PASSWORD_NOT_CHANGED;\n            } else {\n                return COMMON_MESSAGE_IDS.SOMETHING_WENT_WRONG;\n            }\n        }\n    }\n\n    verifyEmailRequest() {\n        this._requestHandler(() => this._accountApi.verifyEmailRequest());\n    }\n\n    async validateUsername(username = '', checkUniq = true) {\n        if (username.length < AccountService.MIN_USERNAME_LENGTH) {\n            return AccountService.USERNAME_MIN_LENGTH_ERR;\n        }\n\n        if (username.length > AccountService.MAX_USERNAME_LENGTH) {\n            return AccountService.USERNAME_MAX_LENGTH_ERR;\n        }\n\n        if (!AccountService.USERNAME_REGEX.test(username)) {\n            return AccountService.USERNAME_INVALID_CHARS_ERR;\n        }\n\n        if (checkUniq) {\n            let isUniq = await this._accountApi.checkUsernameUniqueness(username);\n            if (!isUniq) {\n                return AccountService.USERNAME_TAKEN_ERR;\n            }\n        }\n\n        return null;\n    }\n\n    validatePassword(password = '') {\n        if (password.length < AccountService.MIN_PASSWORD_LENGTH) {\n            return {\n                msgId: COMMON_MESSAGE_IDS.PASSWORD_MIN_LENGTH_ERR,\n                minLength: AccountService.MIN_PASSWORD_LENGTH\n            }\n        }\n\n        if (password.length > AccountService.MAX_PASSWORD_LENGTH) {\n            return {\n                msgId: COMMON_MESSAGE_IDS.PASSWORD_MAX_LENGTH_ERR,\n                maxLength: AccountService.MAX_PASSWORD_LENGTH\n            }\n        }\n\n        return null;\n    }\n\n    async validateEmail(email = '', checkUniq = true) {\n        if (email.length < AccountService.MIN_EMAIL_LENGTH ||\n            email.length > AccountService.MAX_EMAIL_LENGTH ||\n            !AccountService.EMAIL_REGEX.test(email)\n        ) {\n            return COMMON_MESSAGE_IDS.EMAIL_INVALID;\n        }\n\n        if (checkUniq) {\n            let isUniq = await this._accountApi.checkEmailUniqueness(email);\n            if (!isUniq) {\n                return COMMON_MESSAGE_IDS.EMAIL_TAKEN;\n            }\n        }\n\n        return null;\n    }\n\n}\n\nexport {\n    AccountService\n}","import { ConflictRequestError } from \"@common/domain/errors/conflictRequestError\";\nimport { GenericRequestError } from \"@common/domain/errors/genericRequestError\";\nimport { UnauthorizedRequestError } from \"@common/domain/errors/unauthorizedRequestError\";\nimport { ForbiddenRequestError } from \"@common/domain/errors/forbiddenRequestError\";\n\nclass BaseService {\n\n    async _requestHandler(apiCallFunc) {\n        try {\n            let result = await apiCallFunc();\n            return result.data;\n        } catch(error) {\n            switch(error.status) {\n                case 409:\n                    throw new ConflictRequestError(error.data);\n                case 403:\n                    throw new ForbiddenRequestError(error.data);\n                case 401:\n                    throw new UnauthorizedRequestError(error.data);\n                default:\n                    throw new GenericRequestError(error.data)\n            }\n        }\n    }\n\n}\n\nexport {\n    BaseService\n}","const COMMON_MESSAGE_IDS = {\n    USERNAME_MIN_LENGTH_ERR: 'USERNAME_MIN_LENGTH_ERR',\n    USERNAME_MAX_LENGTH_ERR: 'USERNAME_MAX_LENGTH_ERR',\n    USERNAME_INVALID_CHARS: 'USERNAME_INVALID_CHARS',\n    USERNAME_TAKEN: 'USERNAME_TAKEN',\n    USERNAME_NEEDED: 'USERNAME_NEEDED',\n    EMAIL_INVALID: 'EMAIL_INVALID',\n    EMAIL_TAKEN: 'EMAIL_TAKEN',\n    EMAIL_NEEDED: 'EMAIL_NEEDED',\n    PASSWORD_MIN_LENGTH_ERR: 'PASSWORD_MIN_LENGTH_ERR',\n    PASSWORD_MAX_LENGTH_ERR: 'PASSWORD_MAX_LENGTH_ERR',\n    PASSWORD_CONFIRMATION_IS_NOT_VALID: 'PASSWORD_CONFIRMATION_IS_NOT_VALID',\n    PASSWORD_NEEDED: 'PASSWORD_NEEDED',\n    NOT_VALID_PASSWORD_OR_EMAIL: 'NOT_VALID_PASSWORD_OR_EMAIL',\n    PASSWORD_IS_NOT_VALID_EMAIL_NOT_CHANGED: 'PASSWORD_IS_NOT_VALID_EMAIL_NOT_CHANGED',\n    OLD_PASSWORD_IS_NOT_VALID_PASSWORD_NOT_CHANGED: 'OLD_PASSWORD_IS_NOT_VALID_PASSWORD_NOT_CHANGED',\n    RESET_PASSWORD_LINK_EXPIRED: 'RESET_PASSWORD_LINK_EXPIRED',\n    SOMETHING_WENT_WRONG: 'SOMETHING_WENT_WRONG',\n}\n\nexport {\n    COMMON_MESSAGE_IDS\n}","class AccountApi {\n    \n    constructor(requester) {\n        this._requester = requester;\n    }\n\n    login(email, password) {\n        return this._requester.post('api/accounts/login', {\n            email, password\n        });\n    }\n\n    logout() {\n        return this._requester.post('/api/accounts/logout').then(res => {\n            return res.data.redirectUrl;\n        });\n    }\n\n    register(username, email, password) {\n        return this._requester.post('api/accounts/register', {\n            username, email, password\n        });\n    }\n\n    resetPasswordRequest(email) {\n        return this._requester.post('api/accounts/reset_password_request', {\n            email\n        });\n    }\n\n    setNewPassword(newPassword, token, id) {\n        return this._requester.post('api/accounts/set_new_password', {\n            newPassword, token, id\n        });\n    }\n\n    changeUsername(newUsername) {\n        return this._requester.post('/api/accounts/change_username', {\n            newUsername\n        });\n    }\n\n    changeEmail(newEmail, password) {\n        return this._requester.post('/api/accounts/change_email', {\n            newEmail, password\n        });\n    }\n\n    changePassword(newPassword, oldPassword) {\n        return this._requester.post('/api/accounts/change_password', {\n            newPassword, oldPassword\n        });\n    }\n\n    verifyEmailRequest() {\n        return this._requester.post('/api/accounts/verify_email_request');\n    }\n\n    checkUsernameUniqueness(username) {\n        return this._requester.post('api/accounts/check_username_uniqueness', {\n            username\n        }).then(res => {\n            return res.data.is_unique;\n        });\n    }\n\n    checkEmailUniqueness(email) {\n        return this._requester.post('api/accounts/check_email_uniqueness', {\n            email\n        }).then(res => {\n            return res.data.is_unique;\n        });\n    }\n\n}\n\nexport {\n    AccountApi\n}","import { createNanoEvents } from \"nanoevents\";\n\nclass EventEmitter {\n    constructor() {\n        this._emitter = createNanoEvents();\n    }\n\n    on(eventName, callback) {\n        return this._emitter.on(eventName, callback);\n    }\n\n    once(eventName, callback) {\n        let stopListen = this._emitter.on(eventName, (...args) => {\n            stopListen();\n            callback(...args);\n        });\n    }\n\n    emit(eventName, ...args) {\n        this._emitter.emit(eventName, ...args);\n    }\n\n    removeAllListeners() {\n        this._emitter.events = {};\n    }\n\n}\n\nexport { EventEmitter };","function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport {\n    getCookie\n}","import axios from 'axios';\nimport { getCookie } from '@common/utils/getCookie';\n\nclass Requester {\n\n    setCsrfToken(token) {\n        this._csrftoken = token;\n    }\n\n    post(url, params) {\n        return new Promise((res, rej) => {\n            axios.post(url, params, { headers: {\n                'Content-type': 'application/json',\n                'X-CSRFToken': this._readCsrfToken()\n            }})\n            .then(axiosResponse => {res(this._buildResultFromAxiosResponse(axiosResponse))})\n            .catch(axiosError => {rej(this._buildResultFromAxiosError(axiosError))})\n        });\n    }\n\n    get(url, params) {\n        return new Promise((res, rej) => {\n            axios.get(url, params, { headers: {\n                'Content-type': 'application/json',\n                'X-CSRFToken': this._readCsrfToken()\n            }})\n            .then(axiosResponse => {res(this._buildResultFromAxiosResponse(axiosResponse))})\n            .catch(axiosError => {rej(this._buildResultFromAxiosError(axiosError))})\n        }) \n    }\n\n    _readCsrfToken() {\n        return this._csrftoken || getCookie('csrftoken');\n    }\n\n    _buildResultFromAxiosResponse(axiosResponse) {\n        return {\n            status: axiosResponse.status,\n            data: axiosResponse.data\n        }\n    }\n\n    _buildResultFromAxiosError(axiosError) {\n        return {\n            status: axiosError.response ? axiosError.response.status : null,\n            data: axiosError.response ? axiosError.response.data : null\n        }\n    }\n}\n\nexport {\n    Requester\n}","const CONSTS = {\n    NEW_EGG_FOOD_COST: null,\n    STEPS_IN_YEAR: null,\n    SPRING_START_YEAR_STEP: null,\n    SUMMER_START_YEAR_STEP: null,\n    AUTUMN_START_YEAR_STEP: null,\n    WINTER_START_YEAR_STEP: null,\n    LAY_EGG_SEASONS: null,\n    NUPTIAL_FLIGHT_SEASONS: null,\n    MAX_DISTANCE_TO_SUB_NEST: null,\n    MAX_SUB_NEST_COUNT: null,\n    REQUIRED_GENES: null,\n    MAX_DISTANCE_TO_OPERATION_TARGET: null,\n    BUILD_NEW_SUB_NEST_OPERATION_REQUIREMENTS: null,\n    DESTROY_NEST_OPERATION_REQUIREMENTS: null,\n    PILLAGE_NEST_OPERATION_REQUIREMENTS: null,\n    TRANSPORT_FOOD_OPERATION_REQUIREMENTS: null,\n    BUILD_FORTIFICATION_OPERATION_REQUIREMENTS: null,\n    ITEM_SOURCE_BLOCKING_RADIUS: null,\n    NEST_BLOCKING_RADIUS: null,\n    MAP_CHUNK_SIZE: null,\n    VIEW_CHUNK_SIZE: null,\n    MAX_NAME_LENGTH: null,\n    MIN_NAME_LENGTH: null,\n    NEST_AREA: null,\n    STEP_TIME: null\n}\n\nfunction initConsts(constsValues) {\n    Object.assign(CONSTS, constsValues)\n}\n\nexport {\n    CONSTS,\n    initConsts\n}","const ACTION_TYPES = {\n    ANT_PICKED_UP_ITEM: 'ant_picked_up_item',\n    ANT_DROPPED_PICKED_ITEM: 'ant_dropped_picked_item',\n    ANT_FLEW_NUPTIAL_FLIGHT: 'ant_flew_nuptial_flight',\n    ANT_FLEW_NUPTIAL_FLIGHT_BACK: 'ant_flew_nuptial_flight_back',\n    ANT_GOT_FERTILIZED: 'ant_got_fertilized',\n    ANT_HOME_NEST_CHANGED: 'ant_home_nest_changed',\n    ANT_CURRENT_ACTIVITY_CHANGED: 'ant_current_activity_changed',\n    ANT_HUNGRY_STATE_CHANGED: 'ant_hungry_state_changed',\n    ENTITY_DIED: 'entity_died',\n    ENTITY_BORN: 'entity_born',\n    ENTITY_WALK: 'entity_walk',\n    ENTITY_GOT_IN_NEST: 'entity_got_in_nest',\n    ENTITY_GOT_OUT_OF_NEST: 'entity_got_out_of_nest',\n    ENTITY_HIBERNATION_STATUS_CHANGED: 'entity_hibernation_status_changed',\n    ENTITY_HP_CHANGE: 'entity_hp_change',\n    ENTITY_ROTATED: 'entity_rotated',\n    ENTITY_COLONY_CHANGED: 'entity_colony_changed',\n    ITEM_WAS_PICKED_UP: 'item_was_picked_up',\n    ITEM_WAS_DROPPED: 'item_was_dropped',\n    ITEM_BEING_BRINGED: 'item_being_bringed',\n    ITEM_BRINGING_STATE_CHANGED: 'item_bringing_state_changed',\n    ITEM_SOURCE_IS_DAMAGED_CHANGED: 'item_source_is_damaged_changed',\n    ITEM_SOURCE_ACCUMULATED_CHANGED: 'item_source_accumulated_changed',\n    NEST_STORED_CALORIES_CHANGED: 'nest_stored_calories_changed',\n    NEST_LARVA_FED: 'nest_larva_fed',\n    NEST_LARVA_ADDED: 'nest_larva_added',\n    NEST_LARVA_REMOVED: 'nest_larva_removed',\n    NEST_EGG_ADDED: 'nest_egg_added',\n    NEST_EGG_DEVELOP: 'nest_egg_develop',\n    NEST_EGG_REMOVED: 'nest_egg_removed',\n    NEST_BUILD_STATUS_CHANGED: 'nest_build_status_changed',\n    NEST_FORTIFICATION_CHANGED: 'nest_fortification_changed',\n    NEST_RENAMED: 'nest_renamed',\n    NUPTIAL_ENVIRONMENT_MALES_CHANGED: 'nuptial_environment_males_changed',\n    NUPTIAL_ENVIRONMENT_SPECIE_GENES_CHANGED: 'nuptial_environment_specie_genes_changed',\n    COLONY_BORN: 'colony_born',\n    COLONY_DIED: 'colony_died',\n    COLONY_OPERATION_CHANGED: 'colony_operation_changed',\n    COLONY_OPERATION_CREATED: 'colony_operation_created',\n    COLONY_OPERATION_DELETED: 'colony_operation_deleted',\n    COLONY_ENEMIES_CHANGED: 'colony_enemies_changed'\n};\n\nexport {\n    ACTION_TYPES\n}","import { LiveEntity } from '../liveEntity';\nimport { EntityTypes } from '@domain/enum/entityTypes';\nimport { ACTION_TYPES } from '../action/actionTypes';\n\nclass BaseAnt extends LiveEntity {\n\n    constructor(eventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, antType, pickedItemId, locatedInNestId, homeNestId, stats, behavior, \n            genome, birthStep, currentActivity, isHungry) {\n        super(eventBus, id, position, angle, EntityTypes.ANT, fromColony, ownerId, hp, maxHp, isInHibernation);\n        this._name = name;\n        this._pickedItemId = pickedItemId;\n        this._antType = antType;\n        this.locatedInNestId = locatedInNestId;\n        this._homeNestId = homeNestId;\n        this._stats = stats;\n        this._behavior = behavior;\n        this._genome = genome\n        this._birthStep = birthStep;\n        this._currentActivity = currentActivity;\n        this._isHungry = isHungry;\n    }\n\n    get isVisible() {\n        return super.isVisible && !this.isInNest;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get antType() {\n        return this._antType;\n    }\n\n    get isInNest() {\n        return !!this._locatedInNestId;\n    }\n\n    get locatedInNestId() {\n        return this._locatedInNestId;\n    }\n\n    set locatedInNestId(nestId) {\n        this._locatedInNestId = nestId;\n    }\n\n    get pickedItemId() {\n        return this._pickedItemId;\n    }\n\n    set pickedItemId(itemId) {\n        this._pickedItemId = itemId;\n    }\n\n    get homeNestId() {\n        return this._homeNestId;\n    }\n\n    set homeNestId(homeNestId) {\n        this._homeNestId = homeNestId;\n        this.events.emit('homeNestChanged');\n    }\n\n    get stats() {\n        return this._stats;\n    }\n\n    get guardianBehavior() {\n        return this._behavior.guardianBehavior;\n    }\n\n    set guardianBehavior(behaviorValue) {\n        this._behavior.guardianBehavior = behaviorValue;\n        this.events.emit('guardianBehaviorChanged');\n    }\n\n    get isCooperativeBehavior() {\n        return this._behavior.isCooperative;\n    }\n\n    set isCooperativeBehavior(isCooperative) {\n        this._behavior.isCooperative = isCooperative;\n        this.events.emit('isCooperativeBehaviorChanged');\n    }\n\n    get genome() {\n        return this._genome;\n    }\n\n    get birthStep() {\n        return this._birthStep;\n    }\n\n    get isQueenOfColony() {\n        return false;\n    }\n\n    get canFlyNuptialFlight() {\n        return false;\n    }\n\n    set isInNuptialFlight(val) {\n        this._isInNuptialFlight = val;\n        this.events.emit('isInNuptialFlightChanged');\n    }\n\n    get isInNuptialFlight() {\n        return this._isInNuptialFlight;\n    }\n\n    get canBeCooperative() {\n        return true;\n    }\n\n    get canBeGuardian() {\n        return true;\n    }\n\n    get currentActivity() {\n        return this._currentActivity;\n    }\n\n    set currentActivity(val) {\n        this._currentActivity = val;\n        this.events.emit('currentActivityChanged');\n    }\n\n    get isHungry() {\n        return this._isHungry;\n    }\n\n    set isHungry(val) {\n        this._isHungry = val;\n        this.events.emit('isHungryChanged');\n    }\n\n    hasPickedItem() {\n        return !!this._pickedItemId;\n    }\n\n    playAction(action) {\n        let isPlayed = super.playAction(action);\n        if (isPlayed) {\n            return true;\n        }\n\n        switch (action.type) {\n            case ACTION_TYPES.ANT_PICKED_UP_ITEM:\n                this._playItemPickingAction(action);\n                return true;\n            case ACTION_TYPES.ANT_DROPPED_PICKED_ITEM:\n                this._playItemDroped(action);\n                return true;\n            case ACTION_TYPES.ANT_HOME_NEST_CHANGED:\n                this._playHomeNestChanged(action);\n                return true;\n            case ACTION_TYPES.ENTITY_GOT_IN_NEST:\n                this._playGotInNest(action);\n                return true;\n            case ACTION_TYPES.ENTITY_GOT_OUT_OF_NEST:\n                this._playGotOutOfNest(action);\n                return true;\n            case ACTION_TYPES.ANT_CURRENT_ACTIVITY_CHANGED:\n                this._playCurrentActivityChanged(action);\n                return true;\n            case ACTION_TYPES.ANT_HUNGRY_STATE_CHANGED:\n                this._playHungryStateChanged(action);\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    _playItemPickingAction(action) {\n        this.pickedItemId = action.actionData.item_id;\n        this._requestActionAnimation(ACTION_TYPES.ANT_PICKED_UP_ITEM, {\n            itemId: this.pickedItemId\n        });\n    }\n\n    _playItemDroped(action) {\n        this._requestActionAnimation(ACTION_TYPES.ANT_DROPPED_PICKED_ITEM, {\n            droppingItemId: this.pickedItemId\n        });\n        this.pickedItemId = null;\n    }\n\n    _playGotInNest(action) {\n        this.locatedInNestId = action.actionData.nest_id;\n        this._requestActionAnimation(ACTION_TYPES.ENTITY_GOT_IN_NEST, {\n            isAntVisibleAfter: this.isVisible\n        });\n    }\n\n    _playGotOutOfNest() {\n        this.locatedInNestId = null;\n        this._requestActionAnimation(ACTION_TYPES.ENTITY_GOT_OUT_OF_NEST, {\n            isAntVisibleAfter: this.isVisible\n        });\n    }\n\n    _playHomeNestChanged(action) {\n        this.homeNestId = action.nestId;\n    }\n\n    _playCurrentActivityChanged(action) {\n        this.currentActivity = action.activity;\n    }\n\n    _playHungryStateChanged(action) {\n        this.isHungry = action.isHungry;\n    }\n\n}\n\nexport { BaseAnt }","import { QueenAnt } from \"./queenAnt\";\nimport { WarriorAnt } from \"./warriorAnt\";\nimport { WorkerAnt } from \"./workerAnt\";\nimport { MaleAnt } from \"./maleAnt\";\n\nexport { \n    QueenAnt,\n    WarriorAnt,\n    WorkerAnt,\n    MaleAnt\n}","import { BaseAnt } from \"./baseAnt\";\nimport { AntTypes } from \"@domain/enum/antTypes\";\nimport { ACTION_TYPES } from \"../action/actionTypes\";\n\nclass MaleAnt extends BaseAnt {\n\n    constructor(eventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, pickedItemId, locatedInNestId, homeNestId, stats, behavior, \n        genome, birthStep, currentActivity, isHungry) {\n        super(eventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, AntTypes.MALE, pickedItemId, locatedInNestId, homeNestId, stats, \n            behavior, genome, birthStep, currentActivity, isHungry);\n    }\n\n    get canFlyNuptialFlight() {\n        return true;\n    }\n\n    get canBeCooperative() {\n        return false;\n    }\n\n    get canBeGuardian() {\n        return false;\n    }\n\n    get isVisible() {\n        return super.isVisible && !this._isInNuptialFlight;\n    }\n\n    playAction(action) {\n        let isPlayed = super.playAction(action);\n        if (isPlayed) {\n            return true;\n        }\n\n        switch (action.type) {\n            case ACTION_TYPES.ANT_FLEW_NUPTIAL_FLIGHT:\n                this._playFlyNuptialFlight(action);\n                return true;\n            default:\n                throw 'unknown type of action'\n        }\n    }\n\n    _playFlyNuptialFlight() {\n        this._requestActionAnimation(ACTION_TYPES.ANT_FLEW_NUPTIAL_FLIGHT, {\n            startPosition: this.position\n        });\n    }\n\n}\n\nexport {\n    MaleAnt\n}","import { BaseAnt } from \"./baseAnt\";\nimport { AntTypes } from \"@domain/enum/antTypes\";\nimport { ACTION_TYPES } from \"../action/actionTypes\";\nimport { Genome } from \"../genetic/genome\";\n\nclass QueenAnt extends BaseAnt {\n\n    constructor(eventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, pickedItemId, locatedInNestId, homeNestId, stats, behavior, genome, \n        birthStep, currentActivity, isFertilized, isInNuptialFlight, breedingMaleGenome, isHungry) {\n        super(eventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, AntTypes.QUEEN, pickedItemId, locatedInNestId, homeNestId, stats, \n            behavior, genome, birthStep, currentActivity, isHungry);\n        this._isFertilized = isFertilized;\n        this._isInNuptialFlight = isInNuptialFlight;\n        this._breedingMaleGenome = breedingMaleGenome;\n    }\n\n    get isVisible() {\n        return super.isVisible && !this._isInNuptialFlight;\n    }\n\n    set isFertilized(val) {\n        this._isFertilized = val;\n    }\n\n    get isFertilized() {\n        return this._isFertilized;\n    }\n\n    get breedingMaleGenome() {\n        return this._breedingMaleGenome;\n    }\n\n    get isQueenOfColony() {\n        return this._isFertilized;\n    }\n\n    get canFlyNuptialFlight() {\n        return !this.isQueenOfColony;\n    }\n\n    get canBeCooperative() {\n        return false;\n    }\n\n    get canBeGuardian() {\n        return false;\n    }\n\n    playAction(action) {\n        let isPlayed = super.playAction(action);\n        if (isPlayed) {\n            return true;\n        }\n\n        switch (action.type) {\n            case ACTION_TYPES.ANT_FLEW_NUPTIAL_FLIGHT:\n                this._playFlyNuptialFlight(action);\n                return true;\n            case ACTION_TYPES.ANT_FLEW_NUPTIAL_FLIGHT_BACK:\n                this._playFlyNuptialFlightBack(action);\n                return true;\n            case ACTION_TYPES.ANT_GOT_FERTILIZED:\n                this._playGotFertilized(action);\n                return true;\n            default:\n                throw 'unknown type of action';\n        }\n    }\n\n    _playFlyNuptialFlight(action) {\n        this.isInNuptialFlight = true;\n        this._requestActionAnimation(ACTION_TYPES.ANT_FLEW_NUPTIAL_FLIGHT, {\n            startPosition: this.position,\n            isBornInNuptialFlight: action.isBornInNuptialFlight\n        });\n    }\n\n    _playFlyNuptialFlightBack(action) {\n        this.setPosition(action.landingPosition.x, action.landingPosition.y)\n        this.isInNuptialFlight = false;\n        this._emitToEventBus('queenFlewNuptialFlightBack');\n        this._requestActionAnimation(ACTION_TYPES.ANT_FLEW_NUPTIAL_FLIGHT_BACK, {\n            landingPosition: action.landingPosition\n        });\n    }\n\n    _playGotFertilized(action) {\n        this.isFertilized = true;\n        this._breedingMaleGenome = Genome.buildFromJson(action.breedingMaleGenome);\n        this.events.emit('gotFertilized');\n    }\n}\n\nexport {\n    QueenAnt\n}","import { BaseAnt } from \"./baseAnt\";\nimport { AntTypes } from \"@domain/enum/antTypes\";\n\nclass WarriorAnt extends BaseAnt {\n\n    constructor(eventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, pickedItemId, locatedInNestId, homeNestId, stats, behavior, genome, \n        birthStep, currentActivity, isHungry) {\n        super(eventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, AntTypes.WARRIOR, pickedItemId, locatedInNestId, homeNestId, stats, \n            behavior, genome, birthStep, currentActivity, isHungry);\n    }\n\n    playAction(action) {\n        let isPlayed = super.playAction(action);\n        if (isPlayed) {\n            return true;\n        }\n\n        switch (action.type) {\n            default:\n                throw 'unknown type of action';\n        }\n    }\n}\n\nexport {\n    WarriorAnt\n}","import { BaseAnt } from \"./baseAnt\";\nimport { AntTypes } from \"@domain/enum/antTypes\";\n\nclass WorkerAnt extends BaseAnt {\n\n    constructor(eventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, pickedItemId, locatedInNestId, homeNestId, stats, behavior, genome, \n        birthStep, currentActivity, isHungry) {\n        super(eventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, AntTypes.WORKER, pickedItemId, locatedInNestId, homeNestId, stats, \n            behavior, genome, birthStep, currentActivity, isHungry);\n    }\n\n    playAction(action) {\n        let isPlayed = super.playAction(action);\n        if (isPlayed) {\n            return true;\n        }\n\n        switch (action.type) {\n            default:\n                throw 'unknown type of action';\n        }\n    }\n\n}\n\nexport {\n    WorkerAnt\n}","import { ACTION_TYPES } from \"./action/actionTypes\";\nimport { EventEmitter } from \"@common/utils/eventEmitter\";\n\nclass AntColony {\n\n    constructor(eventBus, id, onwerId, name, operations, enemies) {\n        this.events = new EventEmitter();\n        this._eventBus = eventBus;\n        this._id = id;\n        this._onwerId = onwerId;\n        this._operations = operations;\n        this._name = name;\n        this._enemies = enemies;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get ownerId() {\n        return this._onwerId;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get operations() {\n        return this._operations;\n    }\n\n    get enemies() {\n        return this._enemies;\n    }\n\n    playAction(action) {\n        switch(action.type) {\n            case ACTION_TYPES.COLONY_DIED:\n                this._playColonyDiedAction(action);\n                break;\n            case ACTION_TYPES.COLONY_OPERATION_CREATED:\n                this._playColonyOperationCreated(action)\n                break;\n            case ACTION_TYPES.COLONY_OPERATION_CHANGED:\n                this._playColonyOperationChanged(action)\n                break;\n            case ACTION_TYPES.COLONY_OPERATION_DELETED:\n                this._playColonyOperationDeleted(action)\n                break;\n            case ACTION_TYPES.COLONY_ENEMIES_CHANGED:\n                this._playColonyEnemiesChanged(action)\n                break;\n            default:\n                throw 'unknown colony action type';\n        }\n    }\n\n    _playColonyOperationCreated(action) {\n        this._operations.push(action.operation);\n        this.events.emit('addedOperation', action.operation);\n        // this.events.emit(`addedOperation:${action.operation.id}`);\n    }\n\n    _playColonyOperationChanged(action) {\n        let operation = this._findOperationById(action.operation.id);\n        Object.assign(operation, action.operation);\n        this.events.emit('operationChanged', operation);\n    }\n\n    _playColonyOperationDeleted(action) {\n        let deletedOperationId = action.operationId;\n        this._operations = this._operations.filter(operation => operation.id != deletedOperationId);\n        this.events.emit('operationDeleted', deletedOperationId);\n    }\n\n    _playColonyEnemiesChanged(action) {\n        this._enemies = action.enemies;\n        this.events.emit('enemiesChanged');\n    }\n\n    _playColonyDiedAction(action) {\n        this._emitToEventBus('colonyDied'); //to delete colony from world\n        this.events.removeAllListeners();\n    }\n\n    _findOperationById(id) {\n        for (let operation of this._operations) {\n            if (operation.id == id) {\n                return operation;\n            }\n        }\n\n        return null;\n    }\n\n    _emitToEventBus(eventName, data) {\n        this._eventBus.emit(eventName, this, data);\n    }\n\n}\n\nexport {\n    AntColony\n}","class Chunk {\n\n    constructor(x, y, width, height) {\n        this._entities = [];\n        this._shape = {x, y, width, height};\n    }\n\n    get shape() {\n        return this._shape;\n    }\n\n    get entities() {\n        return this._entities;\n    }\n\n    addEntity(entity) {\n        this._entities.push(entity);\n    }\n\n    removeEntity(entity) {\n        let index = this._entities.indexOf(entity);\n        if (index > -1) {\n            this._entities.splice(index, 1);\n        }\n    }\n\n    hasEntity(entity) {\n        let index = this._entities.indexOf(entity);\n        return index > -1;\n    }\n\n    // containsPoint({x, y}) {\n    //     let minX = this._shape.x;\n    //     let maxX = this._shape.x + this._shape.width - 1;\n    //     let minY = this._shape.y;\n    //     let maxY = this._shape.y + this._shape.height - 1;\n\n    //     return x >= minX && x <= maxX && y >= minY && y <= maxY;\n    // }\n\n    intersectsRect(x, y, width, height) {\n        let chunkMinX = this._shape.x;\n        let chunkMaxX = this._shape.x + this._shape.width - 1;\n        let chunkMinY = this._shape.y;\n        let chunkMaxY = this._shape.y + this._shape.height - 1;\n\n        let otherMinX = x;\n        let otherMaxX = x + width - 1;\n        let otherMinY = y;\n        let otherMaxY = y + height - 1;\n\n        return !(\n            chunkMaxX < otherMinX || \n            chunkMinX > otherMaxX || \n            chunkMaxY < otherMinY ||\n            chunkMinY > otherMaxY\n        );\n    }\n}\n\nexport {\n    Chunk\n}","import { EventEmitter } from \"@common/utils/eventEmitter\";\n\nclass Climate extends EventEmitter {\n\n    constructor() {\n        super();\n    }\n\n    get dailyTemperature() {\n        return this._dailyTemp;\n    }\n\n    get directionOfChange() {\n        return this._directionOfChange;\n    }\n\n    setTemperatureChange(dailyTemp, directionOfChange) {\n        this._dailyTemp = dailyTemp;\n        this._directionOfChange = directionOfChange;\n        this.emit('change');\n    }\n\n    playAction(action) {\n        switch(action.type) {\n            case 'climate_temperature_change':\n                this._playTemperatureChangeAction(action);\n        }\n    }\n\n    _playTemperatureChangeAction(action) {\n        this.setTemperatureChange(action.dailyTemperature, action.directionOfChange);\n    }\n}\n\nexport {\n    Climate\n}","import { EventEmitter } from \"@common/utils/eventEmitter\";\nimport { Genome } from \"./genetic/genome\";\nimport { EggStates } from \"@domain/enum/eggStates\";\n\nclass Egg {\n\n    static buildFromJson(json) {\n        let genome = Genome.buildFromJson(json.genome);\n        return new Egg(json.id, json.name, genome, json.progress, json.antType, json.state);\n    }\n\n    constructor(id, name, genome, progress, antType, state) {\n        this.events = new EventEmitter();\n        this.id = id;\n        this.name = name;\n        this.genome = genome;\n        this.progress = progress;\n        this.antType = antType;\n        this.state = state;\n    }\n\n    get isFertilized() {\n        return this.genome.isFertilized;\n    }\n\n    get avaliableAntTypes() {\n        return this.genome.avaliableAntTypes;\n    }\n\n    updateProgress(progress, state) {\n        this.progress = progress;\n        this.state = state;\n    }\n\n}\n\nexport {\n    Egg\n}","import { EventEmitter } from \"@common/utils/eventEmitter\";\nimport { ACTION_TYPES } from './action/actionTypes';\n\nclass Entity {\n\n    constructor(eventBus, id, position, angle, type, fromColony, ownerId, hp, maxHp) {\n        this.events = new EventEmitter();\n        this._eventBus = eventBus;\n        this.id = id;\n        this._position = position;\n        this.type = type;\n        this._fromColony = fromColony;\n        this._ownerId = ownerId;\n        this._angle = angle;\n        this._hp = hp;\n        this._maxHp = maxHp;\n        this._isDied = false;\n        this._chunkId = null;\n    }\n\n    get isVisible() {\n        return true;\n    }\n\n    get state() {\n        return this._state;\n    }\n\n    setPosition(x, y) {\n        this._position = {x, y};\n        this.events.emit('positionChanged');\n        this._eventBus.emit('entityMoved', this);\n    }\n\n    get position(){\n        return this._position;\n    }\n\n    get angle() {\n        return this._angle;\n    }\n\n    set angle(value) {\n        this._angle = value;\n        this.events.emit('angleChanged');\n    }\n\n    get fromColony() {\n        return this._fromColony;\n    }\n\n    set fromColony(val) {\n        this._fromColony = val;\n        this.events.emit('fromColonyChanged');\n    }\n\n    get ownerId() {\n        return this._ownerId;\n    }\n\n    get hp() {\n        return this._hp;\n    }\n\n    set hp(value) {\n        this._hp = value;\n        this.events.emit('hpChanged');\n    }\n\n    get maxHp() {\n        return this._maxHp\n    }\n\n    get isDied() {\n        return this._isDied;\n    }\n\n    get chunkId() {\n        return this._chunkId;\n    }\n\n    set chunkId(newChunkId) {\n        let prevChunkId = this._chunkId;\n        this._chunkId = newChunkId;\n        if (newChunkId && prevChunkId) {\n            this._eventBus.emit('entityChunkMigration', this, prevChunkId);\n        } else if (newChunkId && !prevChunkId) {\n            this._eventBus.emit('entityAddedToChunks', this, null);\n        } else if (!newChunkId && prevChunkId) {\n            this._eventBus.emit('entityRemovedFromChunks', this);\n        } \n    }\n\n    playAction(action) {\n        switch (action.type) {\n            case ACTION_TYPES.ENTITY_HP_CHANGE:\n                this._playHpChange(action);\n                return true;\n            case ACTION_TYPES.ENTITY_DIED:\n                this._playEntityDied(action);\n                return true;\n            case ACTION_TYPES.ENTITY_COLONY_CHANGED:\n                this._playEntityColonyChanged(action);\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    _emitToEventBus(eventName, data) {\n        this._eventBus.emit(eventName, this, data);\n    }\n\n    _playHpChange(action) {\n        this.hp = action.actionData.hp;\n        this._requestActionAnimation(ACTION_TYPES.ENTITY_HP_CHANGE, {\n            hp: this.hp\n        });\n    }\n\n    _playEntityDied(action) {\n        this._isDied = true;\n        this._requestActionAnimation(ACTION_TYPES.ENTITY_DIED);\n        this._emitToEventBus('entityDied');//to delete entity from world\n        this.events.removeAllListeners();\n    }\n\n    _playEntityColonyChanged(action) {\n        this.fromColony = action.colonyId;\n    }\n\n    _requestActionAnimation(animationType, animationParams = {}) {\n        this._eventBus.emit('entityActionAnimationRequest', this._chunkId, this.id, animationType, animationParams);\n    }\n\n}\n\nexport {\n    Entity\n}","class ChromosomesSet {\n    constructor(chromosomes) {\n        this._chromosomes = chromosomes;\n    }\n\n    get chromosomes() {\n        return this._chromosomes;\n    }\n\n    getChromosomeByType(type) {\n        for (let chromosome of this._chromosomes) {\n            if (chromosome.type == type) {\n                return chromosome;\n            }\n        }\n    }\n}\n\nexport {\n    ChromosomesSet\n}","import { ChromosomesSet } from \"./chromosomesSet\";\n\nclass Genome {\n\n    static buildFromJson(json) {\n        let maternalChromosomesSet = new ChromosomesSet(json.maternal);\n        let paternalChromosomesSet = json.paternal ? new ChromosomesSet(json.paternal) : null;\n        return new Genome(maternalChromosomesSet, paternalChromosomesSet, json.avaliableAntTypes);\n    }\n\n    constructor(maternal, paternal, avaliableAntTypes) {\n        this._maternal = maternal;\n        this._paternal = paternal;\n        this._avaliableAntTypes = avaliableAntTypes;\n    }\n    \n    get maternal() {\n        return this._maternal;\n    }\n    \n    get paternal() {\n        return this._paternal;\n    }\n    \n    get avaliableAntTypes() {\n        return this._avaliableAntTypes;\n    }\n\n    get isFertilized() {\n        return !!this._paternal;\n    }\n\n}\n\nexport {\n    Genome\n}","import { Entity } from \"./entity\"\nimport { EntityTypes } from \"../enum/entityTypes\";\nimport { ACTION_TYPES } from \"./action/actionTypes\";\n\nclass Item extends Entity {\n    \n    constructor(eventBus, id, position, angle, fromColony, hp, maxHp, itemType, itemVariety, isPicked, isBringing) {\n        super(eventBus, id, position, angle, EntityTypes.ITEM, fromColony, null, hp, maxHp);\n        this._itemType = itemType;\n        this._itemVariety = itemVariety;\n        this._isPicked = isPicked;\n        this._isBringing = isBringing;\n    }\n\n    get isVisible() {\n        return super.isVisible && !this.isPicked;\n    }\n\n    get itemType() {\n        return this._itemType;\n    }\n\n    get itemVariety() {\n        return this._itemVariety;\n    }\n\n    get isPicked() {\n        return this._isPicked;\n    }\n\n    set isPicked(value) {\n        this._isPicked = value;\n    }\n\n    get isBringing() {\n        return this._isBringing;\n    }\n\n    playAction(action) {\n        let promise = super.playAction(action)\n        if (promise) {\n            return promise\n        }\n        switch (action.type) {\n            case ACTION_TYPES.ITEM_WAS_PICKED_UP:\n                return this._playItemPickedUp(action);\n            case ACTION_TYPES.ITEM_WAS_DROPPED:\n                return this._playItemDrop(action);\n            case ACTION_TYPES.ITEM_BEING_BRINGED:\n                return this._playItemBeingBringed(action);\n            case ACTION_TYPES.ITEM_BRINGING_STATE_CHANGED:\n                return this._playItemBringingStateChanged(action);\n        }\n    }\n\n    async _playItemPickedUp(action) {\n        this.isPicked = true;\n        this._requestActionAnimation(ACTION_TYPES.ITEM_WAS_PICKED_UP);\n    }\n    \n    playItemDrop(pos) {\n        this.isPicked = false;\n        this.setPosition(pos.x, pos.y);\n        this._requestActionAnimation(ACTION_TYPES.ITEM_WAS_DROPPED, {\n            dropPosition: pos\n        });\n    }\n\n    async _playItemDrop(action) {\n    }\n\n    async _playItemBeingBringed(action) {\n        this._requestActionAnimation(ACTION_TYPES.ITEM_BEING_BRINGED, {\n            pointFrom: this.position, \n            pointTo: action.new_position,\n            userSpeed: action.bring_user_speed\n        });\n        this.setPosition(action.new_position.x, action.new_position.y);\n    }\n\n    _playItemBringingStateChanged(action) {\n        this._isBringing = action.isBringing;\n        return Promise.resolve();\n    }\n\n}\n\nexport {\n    Item\n}","import { Entity } from './entity';\nimport { EntityTypes } from '../enum/entityTypes';\n\nclass ItemArea extends Entity {\n    constructor(eventBus, id, position, angle, hp, maxHp) {\n        super(eventBus, id, position, angle, EntityTypes.ITEM_AREA, null, null, hp, maxHp);\n    }\n}\n\nexport {\n    ItemArea\n}","import { Entity } from \"./entity\"\nimport { EntityTypes } from \"../enum/entityTypes\";\nimport { ACTION_TYPES } from \"./action/actionTypes\";\n\nclass ItemSource extends Entity {\n    \n    constructor(eventBus, id, position, angle, fromColony, hp, maxHp, itemType, isDamaged, accumulated, maxAccumulated, fertility) {\n        super(eventBus, id, position, angle, EntityTypes.ITEM_SOURCE, fromColony, null, hp, maxHp);\n        this._itemType = itemType;\n        this._isDamaged = isDamaged;\n        this._accumulated = accumulated;\n        this._maxAccumulated = maxAccumulated;\n        this._fertility = fertility;\n    }\n\n    get itemType() {\n        return this._itemType;\n    }\n\n    get isDamaged() {\n        return this._isDamaged;\n    }\n\n    get accumulated() {\n        return this._accumulated;\n    }\n\n    get maxAccumulated() {\n        return this._maxAccumulated;\n    }\n\n    get fertility() {\n        return this._fertility;\n    }\n\n    playAction(action) {\n        let isPlayed = super.playAction(action);\n        if (isPlayed) {\n            return true;\n        }\n        switch (action.type) {\n            case ACTION_TYPES.ITEM_SOURCE_IS_DAMAGED_CHANGED:\n                this._playIsDamagedChangedAction(action);\n                return true;\n            case ACTION_TYPES.ITEM_SOURCE_ACCUMULATED_CHANGED:\n                this._playAccumulatedChangedAction(action);\n                return true;\n            default:\n                throw 'unknown type of action';\n        }\n    }\n\n    _playIsDamagedChangedAction(action) {\n        this._isDamaged = action.isDamaged;\n        this._requestActionAnimation(ACTION_TYPES.ITEM_SOURCE_IS_DAMAGED_CHANGED, {\n            isDamaged: this._isDamaged\n        })\n    }\n\n    _playAccumulatedChangedAction(action) {\n        this._accumulated = action.accumulated;\n        this._requestActionAnimation(ACTION_TYPES.ITEM_SOURCE_ACCUMULATED_CHANGED, {\n            accumulated: this._accumulated\n        })\n    }\n}\n\nexport {\n    ItemSource\n}","import { EntityTypes } from '../enum/entityTypes';\nimport { LiveEntity } from './liveEntity';\n\nclass Ladybug extends LiveEntity {\n\n    constructor(eventBus, id, position, angle, fromColony, hp, maxHp, isInHibernation) {\n        super(eventBus, id, position, angle, EntityTypes.LADYBUG, fromColony, null, hp, maxHp, isInHibernation);\n    }\n\n}\n\nexport {\n    Ladybug\n}","import { EventEmitter } from \"@common/utils/eventEmitter\";\nimport { Genome } from \"./genetic/genome\";\n\nclass Larva {\n\n    static buildFromJson(json) {\n        let genome = Genome.buildFromJson(json.genome);\n        return new Larva(json.id, json.name, json.antType, json.ateFood, json.requiredFood, genome);\n    }\n\n    constructor(id, name, antType, ateFood, requiredFood, genome) {\n        this.events = new EventEmitter();\n        this.id = id;\n        this.name = name;\n        this.antType = antType;\n        this._ateFood = ateFood;\n        this.requiredFood = requiredFood;\n        this.genome = genome;\n    }\n\n    get ateFood() {\n        return this._ateFood;\n    }\n\n    set ateFood(value) {\n        this._ateFood = value;\n        this.events.emit('progressChanged');\n    }\n\n}\n\nexport {\n    Larva\n}","import { Entity } from \"./entity\"\nimport { ACTION_TYPES } from './action/actionTypes';\n\nclass LiveEntity extends Entity {\n\n    constructor(eventBus, id, position, angle, entityType, fromColony, ownerId, hp, maxHp, isInHibernation) {\n        super(eventBus, id, position, angle, entityType, fromColony, ownerId, hp, maxHp);\n        this._isInHibernation = isInHibernation;\n    }\n\n    get isInHibernation() {\n        return this._isInHibernation;\n    }\n\n    set isInHibernation(val) {\n        this._isInHibernation = val;\n    }\n\n    get isVisible() {\n        return super.isVisible && !this._isInHibernation;\n    }\n\n    playAction(action) {\n        let isPlayed = super.playAction(action);\n        if (isPlayed) {\n            return true;\n        }\n\n        switch (action.type) {\n            case ACTION_TYPES.ENTITY_ROTATED:\n                this._playEntityRotated(action);\n                return true;\n            case ACTION_TYPES.ENTITY_WALK:\n                this._playWalkAction(action);\n                return true;\n            case ACTION_TYPES.ENTITY_HIBERNATION_STATUS_CHANGED:\n                this._playHibernationStatusChanged(action);\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    _playEntityRotated(action) {\n        this._requestActionAnimation(ACTION_TYPES.ENTITY_ROTATED, {\n            startAngle: this.angle,\n            newAngle: action.actionData.angle\n        });\n        this.angle = action.actionData.angle;\n    }\n\n    _playWalkAction(action) {\n        this._requestActionAnimation(ACTION_TYPES.ENTITY_WALK, {\n            pointFrom: this.position,\n            pointTo: action.position,\n            userSpeed: action.userSpeed\n        });\n        this.setPosition(action.position.x, action.position.y);\n    }\n\n    _playHibernationStatusChanged(action) {\n        this.isInHibernation = action.isInHibernation;\n        this._requestActionAnimation(ACTION_TYPES.ENTITY_HIBERNATION_STATUS_CHANGED, {\n            isEntityVisibleAfter: this.isVisible\n        });\n    }\n\n}\n\nexport {\n    LiveEntity\n}","import { Entity } from './entity';\nimport { EntityTypes } from '../enum/entityTypes';\nimport { ACTION_TYPES } from './action/actionTypes';\nimport { Larva } from './larva';\nimport { Egg } from './egg';\n\nclass Nest extends Entity {\n\n    constructor(eventBus, id, position, angle, fromColony, ownerId, storedCalories, larvae, eggs, isBuilt, hp, maxHp, fortification, maxFortification, name, isMain, area) {\n        super(eventBus, id, position, angle, EntityTypes.NEST, fromColony, ownerId, hp, maxHp);\n        this._storedCalories = storedCalories;\n        this._larvae = larvae;\n        this._eggs = eggs;\n        this._fortification = fortification;\n        this._maxFortification = maxFortification;\n        this._name = name;\n        this._isMain = isMain;\n        this._area = area;\n        this._isBuilt = isBuilt;\n    }\n\n    get storedCalories() {\n        return this._storedCalories;\n    }\n\n    get larvae() {\n        return this._larvae;\n    }\n\n    get eggs() {\n        return this._eggs;\n    }\n\n    get fortification() {\n        return this._fortification;\n    }\n\n    set fortification(value) {\n        this._fortification = value;\n    }\n\n    get maxFortification() {\n        return this._maxFortification;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get isMain() {\n        return this._isMain;\n    }\n\n    get area() {\n        return this._area;\n    }\n\n    get isBuilt() {\n        return this._isBuilt;\n    }\n\n    changeCasteForEgg(eggId, antType) {\n        let egg = this._findEggById(eggId);\n        egg.antType = antType;\n        this.events.emit('eggUpdated', egg.id, {\n            antType: egg.antType,\n        });\n    }\n\n    changeNameForEgg(eggId, name) {\n        let egg = this._findEggById(eggId);\n        egg.name = name;\n        this.events.emit('eggUpdated', egg.id, {\n            name: egg.name,\n        });\n    }\n\n    _removeEggFromArray(eggId) {\n        let index = this._eggs.findIndex(e => e.id == eggId);\n        if (index != -1) {\n            this._eggs.splice(index, 1);\n        }\n    }\n\n    _removeLarvaFromArray(larvaId) {\n        let index = this._larvae.findIndex(l => l.id == larvaId);\n        if (index != -1) {\n            this._larvae.splice(index, 1);\n        }\n    }\n\n    _findEggById(id) {\n        return this._eggs.find(egg => egg.id == id);\n    }\n\n    _findLarvaById(id) {\n        return this._larvae.find(larva => larva.id == id);\n    }\n\n    playAction(action) {\n        let isPlayed = super.playAction(action);\n        if (isPlayed) {\n            return true;\n        }\n        switch (action.type) {\n            case ACTION_TYPES.NEST_STORED_CALORIES_CHANGED:\n                this._playStoredCaloriesChanged(action);\n                return true;\n            case ACTION_TYPES.NEST_LARVA_FED:\n                this._playLarvaFed(action);\n                return true;\n            case ACTION_TYPES.NEST_LARVA_ADDED:\n                this._playLarvaAdded(action);\n                return true;\n            case ACTION_TYPES.NEST_LARVA_REMOVED:\n                this._playLarvaRemoved(action);\n                return true;\n            case ACTION_TYPES.NEST_BUILD_STATUS_CHANGED:\n                this._playBuildStatusChanged(action);\n                return true;\n            case ACTION_TYPES.NEST_EGG_ADDED:\n                this._playEggAdded(action);\n                return true;\n            case ACTION_TYPES.NEST_EGG_DEVELOP:\n                this._playEggDevelop(action);\n                return true;\n            case ACTION_TYPES.NEST_EGG_REMOVED:\n                this._playEggRemoved(action);\n                return true;\n            case ACTION_TYPES.NEST_FORTIFICATION_CHANGED:\n                this._playFortificationChanged(action);\n                return true;\n            case ACTION_TYPES.NEST_RENAMED:\n                this._playRenamed(action);\n                return true;\n            default:\n                throw 'unknown type of action';\n        }\n    }\n\n    _playStoredCaloriesChanged(action) {\n        this._storedCalories = action.storedCalories;\n        this.events.emit('storedCaloriesChanged');\n    }\n\n    _playLarvaFed(action) {\n        let larva = this._larvae.find(larva => larva.id == action.larvaId);\n        larva.ateFood = action.ateFood;\n        this.events.emit('larvaUpdated', larva.id, {\n            ateFood: larva.ateFood\n        });\n    }\n\n    _playLarvaAdded(action) {\n        let larva = Larva.buildFromJson(action.larva);\n        this._larvae.push(larva);\n        this.events.emit('larvaAdded', larva);\n    }\n\n    _playLarvaRemoved(action) {\n        this._removeLarvaFromArray(action.larvaId);\n        this.events.emit('larvaRemoved', action.larvaId);\n    }\n    \n    _playEggDevelop(action) {\n        let egg = this._findEggById(action.eggId);\n        egg.updateProgress(action.progress, action.state);\n        this.events.emit('eggUpdated', egg.id, {\n            state: egg.state,\n            progress: egg.progress\n        });\n    }\n\n    _playEggAdded(action) {\n        let egg = Egg.buildFromJson(action.egg); \n        this._eggs.push(egg);\n        this.events.emit('eggAdded', egg);\n    }\n\n    _playEggRemoved(action) {\n        this._removeEggFromArray(action.eggId);\n        this.events.emit('eggRemoved', action.eggId);\n    }\n\n    _playBuildStatusChanged(action) {\n        this._isBuilt = action.isBuilt;\n        this._requestActionAnimation(ACTION_TYPES.NEST_BUILD_STATUS_CHANGED, {\n            isBuilt: this._isBuilt\n        });\n    }\n\n    _playFortificationChanged(action) {\n        this.fortification = action.fortification;\n        this._requestActionAnimation(ACTION_TYPES.NEST_FORTIFICATION_CHANGED, {\n            fortification: this.fortification\n        });\n    }\n\n    _playRenamed(action) {\n        this._name = action.name;\n        this._requestActionAnimation(ACTION_TYPES.NEST_RENAMED, {\n            name: action.name\n        });\n        this.events.emit('nameChanged');\n    }\n\n}\n\nexport {\n    Nest\n}\n","import { EventEmitter } from \"@common/utils/eventEmitter\"\n\nclass NuptialEnvironment {\n\n    static build() {\n        return new NuptialEnvironment();\n    }\n\n    constructor() {\n        this.events = new EventEmitter();\n        this._nuptialMales = [];\n        this._specieData = null;\n    }\n\n    get nuptialMales() {\n        return this._nuptialMales;\n    }\n\n    setNuptialMales(males) {\n        this._nuptialMales = males;\n    }\n\n    get specieData() {\n        return this._specieData;\n    }\n\n    setSpecieData(specieData) {\n        this._specieData = specieData;\n    }\n\n}\n\nexport {\n    NuptialEnvironment\n}","import { Entity } from './entity';\nimport { EntityTypes } from '@domain/enum/entityTypes';\n\nclass Tree extends Entity {\n\n    constructor(eventBus, id, position, angle, fromColony, ownerId, hp, maxHp) {\n        super(eventBus, id, position, angle, EntityTypes.TREE, fromColony, ownerId, hp, maxHp);\n    }\n}\n\nexport {\n    Tree\n}","import { EntityTypes } from \"../enum/entityTypes\";\nimport { CONSTS } from \"@domain/consts\";\nimport { Chunk } from \"./chunk\";\nimport { distance_point } from \"@utils/distance\";\nimport { SEASON_TYPES } from \"@domain/enum/season_types\";\n\nclass World {\n    constructor(mainEventBus, climate) {\n        this._mainEventBus = mainEventBus;\n        this._entities = [];\n        this._colonies = [];\n        this._climate = climate;\n        this._currentStep = 0;\n        this._currentSeason = null;\n        this._size = null;\n        this._chunks = {};\n\n        this._mainEventBus.on('entityMoved', this._onEntityMoved.bind(this));\n    }\n\n    get currentStep() {\n        return this._currentStep;\n    }\n\n    set currentStep(stepNumber) {\n        this._currentStep = stepNumber;\n        this._mainEventBus.emit('currentStepChanged', stepNumber);\n    }\n\n    get currentSeason() {\n        return this._currentSeason\n    }\n\n    set currentSeason(season) {\n        this._currentSeason = season;\n    }\n\n    get entities() {\n        return [...this._entities];\n    }\n\n    get colonies() {\n        return [...this._colonies];\n    }\n\n    get size() {\n        return this._size;\n    }\n\n    get climate() {\n        return this._climate;\n    }\n\n    get chunks() {\n        return this._chunks;\n    }\n\n    initWorld(size, entities, colonies, climate, stepNumber, season) {\n        this._size = size;\n        this._entities = entities;\n        this._entitiesByIds = {};\n        this._colonies = colonies;\n        this._climate.setTemperatureChange(climate.dailyTemperature, climate.directionOfChange);\n        this._currentStep = stepNumber;\n        this._currentSeason = season;\n\n        this._splitOnChunks();\n        this._addAllEntitiesToChunks();\n        this._addAllEntitiesToIds();\n    }\n\n    getAnts() {\n        return this.findEntityByType(EntityTypes.ANT);\n    }\n\n    getNests() {\n        return this.findEntityByType(EntityTypes.NEST);\n    }\n\n    addEntity(entity) {\n        this._entities.push(entity);\n        this._addEntityToChunks(entity);\n        this._addEntityToIds(entity);\n    }\n\n    deleteEntity(entity) {\n        let index = this._entities.indexOf(entity);\n        if (index != -1) {\n            this._entities.splice(index, 1);\n        }\n        this._removeEntityFromChunks(entity);\n        this._removeEntityFromIds(entity);\n    }\n\n    addColony(colony) {\n        this._colonies.push(colony);\n    }\n\n    deleteColony(colony) {\n        let index = this._colonies.indexOf(colony);\n        if (index != -1) {\n            this._colonies.splice(index, 1);\n        }\n    }\n\n    findEntityByType(type) {\n        return this._entities.filter(e => e.type == type);\n    }\n\n    findEntityById(id) {\n        return this._entitiesByIds[id];\n        return this._entities.find( entity => entity.id == id);\n    }\n\n    findColonyById(id) {\n        return this._colonies.find( colony => colony.id == id);\n    }\n\n    isAnyColonyByOwnerId(ownerId) {\n        return this._colonies.some(colony => colony.ownerId == ownerId);\n    }\n\n    isAnyAntByOwnerId(ownerId) {\n        return this._entities.some(entity => entity.type == EntityTypes.ANT && entity.ownerId == ownerId);\n    }\n\n    findAntsByOwnerId(ownerId) {\n        return this._entities.filter(entity => entity.type == EntityTypes.ANT && entity.ownerId == ownerId);\n    }\n\n    findAntsFromColony(colonyId) {\n        return this._entities.filter(e => e.type == EntityTypes.ANT && e.fromColony == colonyId);\n    }\n\n    findColonyByOwnerId(ownerId) {\n        return this._colonies.find(colony => colony.ownerId == ownerId);\n    }\n\n    findColoniesByOwnerId(ownerId) {\n        return this._colonies.filter(colony => colony.ownerId == ownerId);\n    }\n\n    findNestsFromColony(colonyId) {\n        return this._entities.filter(e => e.type == EntityTypes.NEST && e.fromColony == colonyId);\n    }\n\n    findNestsByOwner(ownerId) {\n        return this._entities.filter(e => e.type == EntityTypes.NEST && e.ownerId == ownerId);\n    }\n\n    getQueenOfColony(colonyId) {\n        let ants = this.findAntsFromColony(colonyId);\n        for (let ant of ants) {\n            if (ant.isQueenOfColony) {\n                return ant;\n            }\n        }\n\n        return null;\n    }\n\n    getMainNestOfColony(colonyId) {\n        let nests = this.findNestsFromColony(colonyId);\n        return nests.find(nest => nest.isMain);\n    }\n\n    getSubNestsOfColony(colonyId) {\n        let nests = this.findNestsFromColony(colonyId);\n        return nests.filter(nest => !nest.isMain);\n    }\n\n    getEntitiesFromChunks(chunkIds) {\n        let entities = [];\n        for (let chunkId of chunkIds) {\n            entities = entities.concat(this._chunks[chunkId].entities);\n        }\n\n        return entities;\n    }\n\n    getEntitiesNear(position, radius) {\n        let searchRect = { \n            x: position.x - radius, \n            y: position.y - radius, \n            width: 2*radius, \n            height: 2*radius \n        };\n        let seacrhingChunkIds = [];\n        for (let chunkId in this._chunks) {\n            let chunk = this._chunks[chunkId];\n            if (chunk.intersectsRect(searchRect.x, searchRect.y, searchRect.width, searchRect.height)) {\n                seacrhingChunkIds.push(chunkId);\n            }\n        }\n\n        let entities = this.getEntitiesFromChunks(seacrhingChunkIds);\n        let foundEntities = [];\n        for (let entity of entities) {\n            if (distance_point(entity.position, position) <= radius) {\n                foundEntities.push(entity);\n            }\n        }\n\n        return foundEntities;\n    }\n\n    _splitOnChunks() {\n        let rowsCount = Math.ceil(this._size[1] / CONSTS.VIEW_CHUNK_SIZE[1]);\n        let colsCount = Math.ceil(this._size[0] / CONSTS.VIEW_CHUNK_SIZE[0]);\n\n        for (let chunkColIndex = 0; chunkColIndex < colsCount; chunkColIndex++) {\n            for (let chunkRowIndex = 0; chunkRowIndex < rowsCount; chunkRowIndex++) {\n                let chunkX = chunkColIndex * CONSTS.VIEW_CHUNK_SIZE[0];\n                let chunkY = chunkRowIndex * CONSTS.VIEW_CHUNK_SIZE[1];\n                let chunkId = `${chunkColIndex}_${chunkRowIndex}`;\n                this._chunks[chunkId] = new Chunk(chunkX, chunkY, CONSTS.VIEW_CHUNK_SIZE[0], CONSTS.VIEW_CHUNK_SIZE[1]);\n            }\n        }\n    }\n\n    _addAllEntitiesToChunks() {\n        for (let entity of this._entities) {\n            this._addEntityToChunks(entity);\n        }\n    }\n\n    _addEntityToChunks(entity) {\n        let chunkId = this._calcChunkIdForPosition(entity.position);\n        let chunk = this._chunks[chunkId];\n        chunk.addEntity(entity);\n        entity.chunkId = chunkId;\n    }\n\n    _removeEntityFromChunks(entity) {\n        let chunk = this._chunks[entity.chunkId];\n        chunk.removeEntity(entity);\n        entity.chunkId = null;\n    }\n\n    _addAllEntitiesToIds() {\n        for (let entity of this._entities) {\n            this._addEntityToIds(entity);\n        }\n    }\n\n    _addEntityToIds(entity) {\n        this._entitiesByIds[entity.id] = entity;\n    }\n\n    _removeEntityFromIds(entity) {\n        delete this._entitiesByIds[entity.id];\n    }\n\n    _onEntityMoved(entity) {\n        let newChunkId = this._calcChunkIdForPosition(entity.position);\n        if (entity.chunkId != newChunkId) {\n            let oldChunk = this._chunks[entity.chunkId];\n            oldChunk.removeEntity(entity);\n            let newChunk = this._chunks[newChunkId];\n            newChunk.addEntity(entity);\n            entity.chunkId = newChunkId;\n        }\n    }\n\n    _calcChunkIdForPosition({x, y}) {\n        let first = Math.floor(x / CONSTS.VIEW_CHUNK_SIZE[0]);\n        let second = Math.floor(y / CONSTS.VIEW_CHUNK_SIZE[1]);\n        return `${first}_${second}`;\n    }\n}\n\nexport { World }","const AntTypes = {\n    WORKER: 'worker',\n    WARRIOR: 'warrior',\n    QUEEN: 'queen',\n    MALE: 'male'\n}\n\nexport {\n    AntTypes\n}","const EggStates = {\n    DEVELOPMENT: 'development',\n    READY: 'ready',\n    SPOILED: 'spoiled'\n}\n\nexport {\n    EggStates\n}","const EntityTypes = {\n    ANT: 'ant',\n    LADYBUG: 'ladybug',\n    NEST: 'nest',\n    ITEM: 'item',\n    ITEM_SOURCE: 'item_source',\n    ITEM_AREA: 'item_area',\n    TREE: 'tree'\n}\n\nexport {\n    EntityTypes\n}","const ErrorCodes = {\n    CONFLICT: 'conflict',\n    UNKNOWN_ERR: 'unknown_err'\n}\n\nexport {\n    ErrorCodes\n}","const ItemTypes = {\n    LEAF: 'leaf',\n    STICK: 'stick',\n    FLOWER: 'flower',\n    HONEYDEW: 'honeydew',\n    NECTAR: 'nectar',\n    BUG_CORPSE: 'bug_corpse',\n    ANT_FOOD: 'ant_food'\n}\n\nexport {\n    ItemTypes\n}","const SEASON_TYPES = {\n    WINTER: 'winter',\n    SPRING: 'spring',\n    SUMMER: 'summer',\n    AUTUMN: 'autumn'\n}\n\nexport {\n    SEASON_TYPES\n}","import { BaseGameService } from \"./base/baseGameService\";\n\nclass AntService extends BaseGameService {\n\n    constructor(mainEventBus, world, antApi) {\n        super(mainEventBus, world);\n        this._antApi = antApi;\n    }\n\n    async antFlyNuptialFlight(antId) {\n        await this._requestHandler(() => this._antApi.flyNuptialFlight(antId));\n    }\n\n    async antChangeGuardianBehavior(antId, behaviorValue) {\n        await this._requestHandler(() => this._antApi.changeGuardianBehavior(antId, behaviorValue));\n        let ant = this._world.findEntityById(antId);\n        ant.guardianBehavior = behaviorValue;\n    }\n\n    async antToggleCooperativeBehavior(antId, isCooperative) {\n        await this._requestHandler(() => this._antApi.toggleCooperativeBehavior(antId, isCooperative));\n        let ant = this._world.findEntityById(antId);\n        ant.isCooperativeBehavior = isCooperative;\n    }\n\n    async antRelocate(antId, homeNestId) {\n        await this._requestHandler(() => this._antApi.relocateToNest(antId, homeNestId));\n        let ant = this._world.findEntityById(antId);\n        ant.homeNestId = homeNestId;\n    }\n\n}\n\nexport {\n    AntService\n}","import { ConflictRequestError } from \"@common/domain/errors/conflictRequestError\";\nimport { BaseService } from \"@common/domain/service/base/baseService\";\nimport { ErrorCodes } from \"@domain/enum/errorCodes\";\n\nclass BaseGameService extends BaseService {\n\n    constructor(mainEventBus, world) {\n        super();\n        this._mainEventBus = mainEventBus;\n        this._world = world;\n    }\n\n    async _requestHandler(apiCallFunc) {\n        try {\n            return await super._requestHandler(apiCallFunc);\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                await this._waitStepSync(e.data.step);\n                throw e;\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    async _waitStepSync(stepNumber) {\n        console.log('waiting step', stepNumber, 'current', this._world.currentStep);\n        return new Promise((res, rej) => {\n            if (this._world.currentStep >= stepNumber) {\n                res();\n            } else {\n                let stopListen = this._mainEventBus.on(`stepSyncDone:${stepNumber}`, () => {\n                    stopListen();\n                    res();\n                });\n            }\n        });\n    }\n\n    _makeSuccessResult(mergIn = {}) {\n        let result = { success: true };\n        return Object.assign(result, mergIn);\n    }\n\n    _makeErrorResult(errCode) {\n        return { success: false, errCode };\n    }\n\n    _makeErrorResultConflict() {\n        return this._makeErrorResult(ErrorCodes.CONFLICT);\n    }\n\n    _makeErrorResultUnknownErr() {\n        return this._makeErrorResult(ErrorCodes.UNKNOWN_ERR);\n    }\n\n}\n\nexport {\n    BaseGameService\n}","import { ACTION_TYPES } from \"@domain/entity/action/actionTypes\";\nimport { BaseGameService } from \"./base/baseGameService\";\nimport { EntityTypes } from \"@domain/enum/entityTypes\";\nimport { ItemTypes } from \"@domain/enum/itemTypes\";\nimport { distance, distance_point } from \"@utils/distance\";\nimport { GAME_MESSAGE_IDS } from \"@messages/messageIds\";\nimport { CONSTS } from \"@domain/consts\";\nimport { ConflictRequestError } from \"@common/domain/errors/conflictRequestError\";\nimport { GenericRequestError } from \"@common/domain/errors/genericRequestError\";\n\nclass ColonyService extends BaseGameService {\n\n    static SAFETY_MARGIN = 2;\n\n    constructor(mainEventBus, world, colonyApi, worldFactory) {\n        super(mainEventBus, world);\n        this._mainEventBus = mainEventBus;\n        this._colonyApi = colonyApi;\n        this._world = world;\n        this._worldFactory = worldFactory;\n\n        this._mainEventBus.on('colonyDied', this._onColonyDied.bind(this));\n    }\n\n    playColonyAction(action) {\n        switch(action.type) {\n            case ACTION_TYPES.COLONY_BORN:\n                this.giveBirthToColony(action.actionData.colony);\n                break;\n            default:\n                let colony = this._world.findColonyById(action.actorId);\n                colony.playAction(action);\n        }\n    \n    }\n\n    giveBirthToColony(colonyJson) {\n        let colony = this._worldFactory.buildAntColony(colonyJson);\n        this._world.addColony(colony);\n        this._mainEventBus.emit('colonyBorn', colony);\n    }\n\n    getEnemyColonyData(colonyId) {\n        let colony = this._world.findColonyById(colonyId);\n        let colonyNests = this._world.findNestsFromColony(colonyId);\n        let xSum = 0;\n        let ySum = 0;\n        for (let nest of colonyNests) {\n            xSum += nest.position.x;\n            ySum += nest.position.y;\n        }\n        let averageX = Math.round(xSum / colonyNests.length);\n        let averageY = Math.round(ySum / colonyNests.length);\n\n        return {\n            id: colonyId,\n            name: colony.name,\n            position: { x: averageX, y: averageY }\n        }\n    }\n\n    stopOperation(colonyId, operationId) {\n        this._colonyApi.stopOperation(colonyId, operationId);\n    }\n\n    async buildNewSubNestOperation(performingColonyId, buildingSite, workersCount, warriorsCount, nestName) {\n        try {\n            let result = await this._requestHandler(() => this._colonyApi.buildNewSubNestOperation(performingColonyId, buildingSite, workersCount, warriorsCount, nestName));\n            return this._makeSuccessResult({ operationId: result.operationId });\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return this._makeErrorResultConflict();\n            } else if (e instanceof GenericRequestError) {\n                return this._makeErrorResultUnknownErr();\n            }\n        }\n}   \n\n    async destroyNestOperation(performingColonyId, warriorsCount, workersCount, nestId) {\n        try {\n            let result = await this._requestHandler(() => this._colonyApi.destroyNestOperation(performingColonyId, warriorsCount, workersCount, nestId));\n            return this._makeSuccessResult({ operationId: result.operationId });\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return this._makeErrorResultConflict();\n            } else if (e instanceof GenericRequestError) {\n                return this._makeErrorResultUnknownErr();\n            }\n        }\n    }\n\n    async pillageNestOperation(performingColonyId, pillagingNestId, nestForLootId, warriorsCount, workersCount) {\n        try {\n            let result = await this._requestHandler(() => this._colonyApi.pillageNestOperation(performingColonyId, pillagingNestId, nestForLootId, warriorsCount, workersCount));\n            return this._makeSuccessResult({ operationId: result.operationId });\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return this._makeErrorResultConflict();\n            } else if (e instanceof GenericRequestError) {\n                return this._makeErrorResultUnknownErr();\n            }\n        }\n    }\n\n    async transportFoodOperation(performingColonyId, fromNestId, toNestId, workersCount, warriorsCount) {\n        try {\n            let result = await this._requestHandler(() => this._colonyApi.transportFoodOperation(performingColonyId, fromNestId, toNestId, workersCount, warriorsCount));\n            return this._makeSuccessResult({ operationId: result.operationId });\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return this._makeErrorResultConflict();\n            } else if (e instanceof GenericRequestError) {\n                return this._makeErrorResultUnknownErr();\n            }\n        }\n    }\n\n    async buildFortificationsOpearation(performingColonyId, nestId, workersCount) {\n        try {\n            let result = await this._requestHandler(() => this._colonyApi.buildFortificationsOpearation(performingColonyId, nestId, workersCount));\n            return this._makeSuccessResult({ operationId: result.operationId });\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return this._makeErrorResultConflict();\n            } else if (e instanceof GenericRequestError) {\n                return this._makeErrorResultUnknownErr();\n            }\n        }\n    }\n\n    async bringBugOpearation(performingColonyId, nestId) {\n        try{\n            let result = await this._requestHandler(() => this._colonyApi.bringBugOpearation(performingColonyId, nestId));\n            return this._makeSuccessResult({ operationId: result.operationId });\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return this._makeErrorResultConflict();\n            } else if (e instanceof GenericRequestError) {\n                return this._makeErrorResultUnknownErr();\n            }\n        }\n    }\n\n    buildMarker(type, point, params = {}) {\n        return {\n            type,\n            point,\n            params\n        };\n    }\n\n    findClosestBugCorpseNearNest(nestId) {\n        let nest = this._world.findEntityById(nestId);\n        let items = this._world.findEntityByType(EntityTypes.ITEM);\n        let bugCorpsesInNestArea = items\n            .filter(\n                (i) =>\n                    i.itemType === ItemTypes.BUG_CORPSE &&\n                    distance(nest.position.x, nest.position.y, i.position.x, i.position.y) <= nest.area &&\n                    !i.isBringing\n            )\n            .sort(\n                (a, b) =>\n                    distance(nest.position.x, nest.position.y, a.position.x, a.position.y) - \n                    distance(nest.position.x, nest.position.y, b.position.x, b.position.y)\n            );\n        \n            return bugCorpsesInNestArea.length > 0 ? bugCorpsesInNestArea[0] : null;\n    }\n\n    getNestBuildableArea(mainNestPosition, chunkIds) {\n        let area = null;\n        if (mainNestPosition) {\n            area = { center: mainNestPosition, radius: CONSTS.MAX_DISTANCE_TO_SUB_NEST - ColonyService.SAFETY_MARGIN};\n        }\n        \n        let entities = this._world.getEntitiesFromChunks(chunkIds);\n        let itemSources = entities.filter(e => e.type == EntityTypes.ITEM_SOURCE);\n        let nests = entities.filter(e => e.type == EntityTypes.NEST);\n        if (mainNestPosition) {\n            let maxBlockingDist = CONSTS.MAX_DISTANCE_TO_SUB_NEST + CONSTS.ITEM_SOURCE_BLOCKING_RADIUS;\n            itemSources = itemSources.filter(is => distance_point(is.position, mainNestPosition) <= maxBlockingDist);\n            nests = nests.filter(nest => distance_point(nest.position, mainNestPosition) <= maxBlockingDist);\n        }\n        \n        let exclusions = [];\n        for (let itemSource of itemSources) {\n            exclusions.push({ center: itemSource.position, radius: CONSTS.ITEM_SOURCE_BLOCKING_RADIUS + ColonyService.SAFETY_MARGIN });\n        }\n\n        for (let nest of nests) {\n            exclusions.push({ center: nest.position, radius: CONSTS.NEST_BLOCKING_RADIUS + ColonyService.SAFETY_MARGIN });\n        }\n\n        return {\n            area,\n            exclusions\n        };\n    }\n\n    getRaidableArea(raidingColonyId, raidAreaCenter, chunkIds) {\n        let entities = this._world.getEntitiesFromChunks(chunkIds);\n        let nests = entities.filter(e => e.type == EntityTypes.NEST);\n        let area = { center: raidAreaCenter, radius: CONSTS.MAX_DISTANCE_TO_OPERATION_TARGET - CONSTS.NEST_BLOCKING_RADIUS - ColonyService.SAFETY_MARGIN};\n\n        let nestPickers = [];\n        let exclusions = [];\n\n        for (let nest of nests) {\n            if (nest.fromColony == raidingColonyId) {\n                exclusions.push({ center: nest.position, radius: CONSTS.NEST_BLOCKING_RADIUS });\n            } else {\n                nestPickers.push({ center: nest.position, radius: CONSTS.NEST_BLOCKING_RADIUS, nestId: nest.id });\n            }\n        }\n\n        return {\n            area,\n            nestPickers,\n            exclusions\n        }\n    }\n\n    validateNewNestOperationConditions(colonyId) {\n        let queen = this._world.getQueenOfColony(colonyId);\n        let mainNest = this._world.getMainNestOfColony(colonyId);\n        if (!queen || !mainNest) {\n            return GAME_MESSAGE_IDS.NEW_SUB_NEST_OPER_CANT_BUILD_SUB_NEST_WITHOUT_QUEEN;\n        }\n\n        let subNests = this._world.getSubNestsOfColony(colonyId);\n        if (subNests.length >= CONSTS.MAX_SUB_NEST_COUNT) {\n            return GAME_MESSAGE_IDS.NEW_SUB_NEST_OPER_CANT_BUILD_MORE_SUB_NESTS;\n        }\n\n        return null;\n    }\n\n    validateBuildingSubNestPosition(position) {\n        if (!position) {\n            return GAME_MESSAGE_IDS.NEW_SUB_NEST_OPER_BUILDING_POSITION_NEEDED;\n        }\n\n        if (!this._checkIsBuildPositionFreeFromNests(position)) {\n            return GAME_MESSAGE_IDS.NEW_SUB_NEST_OPER_BUILDING_POSITION_BLOCKED;\n        }\n\n        return null;\n    }\n\n    validateBuildingNewNestPosition(position) {\n        if (!position) {\n            return GAME_MESSAGE_IDS.BREEDING_PLACE_TO_SETTLE_NEEDED;\n        }\n\n        if (!this._checkIsBuildPositionFreeFromNests(position)) {\n            return GAME_MESSAGE_IDS.BREEDING_PLACE_TO_SETTLE_BLOCKED;\n        }\n\n        return null;\n    }\n\n    validateBreedingQueen(queenId) {\n        let queen = this._world.findEntityById(queenId);\n\n        if (!queen) {\n            return GAME_MESSAGE_IDS.BREEDING_QUEEN_NEEDED;\n        }\n\n        if (queen.isDied) {\n            return GAME_MESSAGE_IDS.BREEDING_LIVE_QUEEN_NEEDED;\n        }\n\n        return null;\n    }\n\n    validateDestroyNestOperationConditions(colonyId) {\n        let queen = this._world.getQueenOfColony(colonyId);\n        if (!queen) {\n            return GAME_MESSAGE_IDS.DESTROY_NEST_OPER_CANT_ATTACK_WITHOUT_QUEEN;\n        }\n\n        return null;\n    }\n\n    validateNestToDestroy(nestId) {\n        let nest = this._world.findEntityById(nestId);\n\n        if (!nestId) {\n            return GAME_MESSAGE_IDS.DESTROY_NEST_OPER_NEST_NEEDED;\n        }\n\n        if (!nest || nest.isDied) {\n            return GAME_MESSAGE_IDS.DESTROY_NEST_OPER_NOT_DESTROYED_NEST_NEEDED;\n        }\n        \n        return null;\n    }\n\n    validatePillageNestOperationConditions(colonyId) {\n        let queen = this._world.getQueenOfColony(colonyId);\n        if (!queen) {\n            return GAME_MESSAGE_IDS.PILLAGE_NEST_OPER_CANT_PILLAGE_WITHOUT_QUEEN;\n        }\n\n        return null;\n    }\n\n    validateNestToPillage(nestId) {\n        let nest = this._world.findEntityById(nestId);\n\n        if (!nestId) {\n            return GAME_MESSAGE_IDS.PILLAGE_NEST_OPER_NEST_TO_PILLAGE_NEEDED;\n        }\n\n        if (!nest || nest.isDied) {\n            return GAME_MESSAGE_IDS.PILLAGE_NEST_OPER_NOT_DESTROYED_NEST_TO_PILLAGE_NEEDED;\n        }\n\n        return null;\n    }\n\n    _checkIsBuildPositionFreeFromNests(position) {\n        let nearEntities = this._world.getEntitiesNear(position, CONSTS.NEST_BLOCKING_RADIUS + ColonyService.SAFETY_MARGIN);\n        let nearNests = nearEntities.filter(e => e.type == EntityTypes.NEST);\n        return nearNests.length == 0;\n    }\n\n    _onColonyDied(colony) {\n        this._world.deleteColony(colony);\n    }\n\n}\n\nexport {\n    ColonyService\n}","import { initConsts } from \"@domain/consts\";\nimport { CONSTS } from \"@domain/consts\";\n\nclass MessageHandlerService {\n\n    constructor(mainEventBus, serverConnection, worldService, colonyService, userService, nuptialEnvironmentService) {\n        this._mainEventBus = mainEventBus;\n        this._serverConnection = serverConnection;\n        this._worldService = worldService;\n        this._colonyService = colonyService;\n        this._userService = userService;\n        this._nuptialEnvironmentService = nuptialEnvironmentService;\n        this._serverConnection.events.on('message', this._onMessage.bind(this));\n    }\n\n    connect(socketURL) {\n        return this._serverConnection.connect(socketURL);\n    }\n\n    disconnect() {\n        this._serverConnection.disconnect();\n    }\n\n    _onMessage(msg) {\n        switch(msg.type) {\n            case 'init_step':\n                this._handleInitStepMsg(msg);\n                break;\n            case 'step':\n                this._handleStepMsg(msg);\n                break;\n            case 'email_verified':\n                this._handleEmailVerifiedMsg(msg);\n                break;\n            default: \n                throw `unknown type of message \"${ msg.type }\"`\n        }\n    }\n\n    _handleInitStepMsg(msg) {\n        initConsts(msg.consts);\n        this._userService.initNotifications(msg.notifications)\n        this._worldService.initWorld(msg.world, msg.step, msg.season);\n        this._worldService.initRating(msg.rating);\n        this._nuptialEnvironmentService.init(msg.specie, msg.nuptialMales);\n        this._mainEventBus.emit('initStepDone');\n    }\n\n    _handleStepMsg(msg) {\n        this._worldService.setCurrentStep(msg.step, msg.season);\n        this._mainEventBus.emit('stepStart', msg.step);\n        for (let action of msg.actions) {\n            switch(action.actorType) {\n                case 'entity':\n                    this._worldService.playEntityAction(action)\n                    break;\n                case 'colony':\n                    this._colonyService.playColonyAction(action);\n                    break;\n                case 'climate':\n                    this._worldService.playClimateAction(action);\n                    break;\n                case 'user':\n                    this._userService.playUserAction(action);\n                    break;\n                case 'rating':\n                    this._worldService.playRatingAction(action);\n                    break;\n                case 'nuptial_environment':\n                    this._nuptialEnvironmentService.playAction(action);\n                    break;\n            }\n        }\n        this._mainEventBus.emit(`stepSyncDone:${msg.step}`);\n        this._mainEventBus.emit('stepDone', msg.step);\n    }\n\n    _handleEmailVerifiedMsg() {\n        this._userService.verifyEmailForUser();\n    }\n\n}\n\nexport {\n    MessageHandlerService\n}","import { BaseGameService } from \"./base/baseGameService\";\nimport { CONSTS } from \"@domain/consts\";\nimport { distance } from '@utils/distance';\nimport { Egg } from \"@domain/entity/egg\";\nimport { Larva } from \"@domain/entity/larva\";\nimport { ConflictRequestError } from \"@common/domain/errors/conflictRequestError\";\nimport { GenericRequestError } from \"@common/domain/errors/genericRequestError\";\n\nclass NestService extends BaseGameService {\n\n    constructor(mainEventBus, world, nestApi) {\n        super(mainEventBus, world);\n        this._nestApi = nestApi;\n    }\n\n    async layEggInNest(nestId, name, isFertilized) {\n        try {\n            let result = await this._requestHandler(() => this._nestApi.layEggInNest(nestId, name, isFertilized));\n            return this._makeSuccessResult({ eggId: result.eggId });\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return this._makeErrorResultConflict();\n            } else if (e instanceof GenericRequestError) {\n                return this._makeErrorResultUnknownErr();\n            }\n        }\n    }\n\n    async changeEggCasteInNest(nestId, eggId, antType) {\n        await this._requestHandler(() => this._nestApi.changeEggCaste(nestId, eggId, antType));\n        let nest = this._world.findEntityById(nestId);\n        nest.changeCasteForEgg(eggId, antType);\n    }\n\n    async changeEggNameInNest(nestId, eggId, name) {\n        await this._requestHandler(() => this._nestApi.changeEggName(nestId, eggId, name));\n        let nest = this._world.findEntityById(nestId);\n        nest.changeNameForEgg(eggId, name);\n    }\n\n    async moveEggToLarvaInNest(nestId, eggId) {\n        try {\n            let result = await this._requestHandler(() => this._nestApi.eggToLarvaChamber(nestId, eggId));\n            return this._makeSuccessResult({ larvaId: result.larvaId });\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return this._makeErrorResultConflict();\n            } else if (e instanceof GenericRequestError) {\n                return this._makeErrorResultUnknownErr();\n            }\n        }\n    }\n\n    async deleteEggInNest(nestId, eggId) {\n        await this._requestHandler(() => this._nestApi.eggDelete(nestId, eggId));\n    }\n\n    async deleteLarvaInNest(nestId, larvaId) {\n        await this._requestHandler(() => this._nestApi.larvaDelete(nestId, larvaId));\n    }\n\n    async renameNest(nestId, name) {\n        await this._requestHandler(() => this._nestApi.renameNest(nestId, name));\n    }\n\n    validateLayingEggInNest(nestId) {\n        let nest = this._world.findEntityById(nestId);\n\n        let queen = this._world.getQueenOfColony(nest.fromColony);\n        if (!queen || queen.locatedInNestId != nest.id) {\n            return 'CANT_LAY_EGG_WITHOUT_QUEEN_IN_NEST';\n        }\n\n        if (nest.storedCalories < CONSTS.NEW_EGG_FOOD_COST) {\n            return'NOT_ENOUGHT_FOOD_IN_NEST_TO_LAY_EGG';\n        }\n\n        if (!CONSTS.LAY_EGG_SEASONS.includes(this._world.currentSeason)) {\n            return 'NOT_SUITABLE_SEASON_TO_LAY_EGG';\n        }\n\n        return null;\n    }\n\n    // findMyFirstNest(userId) {\n    //     let myNests = this._world.findNestsByOwner(userId);\n    //     for (let nest of myNests) {\n    //         if (nest.isMain) {\n    //             return nest;\n    //         }\n    //     }\n\n    //     if (myNests.length > 0) {\n    //         return myNests[0];\n    //     } else {\n    //         return null;\n    //     }\n    // }\n\n    findNearestNest(point, excludeColonyId) {\n        let nests = this._world.getNests();\n        let nearestNest = null;\n        let smallestDistance = null;\n        let maxDist = 100;\n\n        nests.forEach(nest => {\n            let dist = distance(point.x, point.y, nest.position.x, nest.position.y);\n            if (!nest.isDied && (!excludeColonyId || nest.fromColony != excludeColonyId) && dist <= maxDist && (!smallestDistance || dist < smallestDistance)) {\n                smallestDistance = dist;\n                nearestNest = nest;\n            }\n        });\n\n        return nearestNest;\n    }\n\n}\n\nexport {\n    NestService\n}","import { BaseGameService } from \"./base/baseGameService\";\nimport { ACTION_TYPES } from \"@domain/entity/action/actionTypes\";\n\nclass NuptialEnvironmentService extends BaseGameService {\n\n    constructor(mainEventBus, world, nuptialEnv, nuptialEnvironmentApi) {\n        super(mainEventBus, world);\n        this._nuptialEnv = nuptialEnv;\n        this._nuptialEnvironmentApi = nuptialEnvironmentApi;\n    }\n\n    init(specieData, nuptialMales) {\n        this._nuptialEnv.setSpecieData(specieData);\n        this._nuptialEnv.setNuptialMales(nuptialMales);\n    }\n\n    foundColony(queenId, nuptialMaleId, nestBuildingSite, colonyName) {\n        try {\n            this._requestHandler(() => this._nuptialEnvironmentApi.foundColony(queenId, nuptialMaleId, nestBuildingSite, colonyName));\n            return this._makeSuccessResult();\n        } catch (e) {\n            if (e instanceof ConflictRequestError) {\n                return this._makeErrorResultConflict();\n            } else if (e instanceof GenericRequestError) {\n                return this._makeErrorResultUnknownErr();\n            }\n        }\n    }\n\n    bornNewAntara() {\n        this._nuptialEnvironmentApi.bornNewAntara();\n    }\n\n    saveSpecieSchema(schema) {\n        this._nuptialEnvironmentApi.saveSpecieSchema(schema);\n    }\n\n    playAction(action) {\n        switch(action.type) {\n            case ACTION_TYPES.NUPTIAL_ENVIRONMENT_MALES_CHANGED:\n                this._playChangedMalesAction(action);\n                break;\n            case ACTION_TYPES.NUPTIAL_ENVIRONMENT_SPECIE_GENES_CHANGED:\n                this._playSpecieGenesChanged(action);\n                break;\n            default:\n                throw 'unknown type of action';\n        }\n    }\n\n    _playChangedMalesAction(action) {\n        this._nuptialEnv.setNuptialMales(action.males);\n        this._mainEventBus.emit('nuptialMalesChanged');\n    }\n\n    _playSpecieGenesChanged(action) {\n        this._mainEventBus.emit('specieChromosomesGenesChanged', action.chromosomeSpecieGenes);\n    }\n\n}\n\nexport {\n    NuptialEnvironmentService\n}","import { BaseGameService } from \"./base/baseGameService\";\n\nclass UserService extends BaseGameService {\n\n    constructor(mainEventBus, world) {\n        super(mainEventBus, world);\n        this._notifications = [];\n    }\n\n    setUserData(userData) {\n        this._userData = userData;\n    }\n\n    verifyEmailForUser() {\n        this._mainEventBus.emit('emailVerified');\n    }\n\n    initNotifications(notifications) {\n        this._notifications = notifications;\n    }\n\n    getNotifications() {\n        return this._notifications;\n    }\n\n    playUserAction(action) {\n        this._notifications.push(action.notification);\n        this._mainEventBus.emit('newNotification', action.notification);\n    }\n\n}\n\nexport {\n    UserService\n}","import { EntityTypes } from '@domain/enum/entityTypes';\n\nclass WorldService {\n\n    constructor(world, worldFactory, mainEventBus) {\n        this._world = world;\n        this._worldFactory = worldFactory;\n        this._mainEventBus = mainEventBus;\n        this._worldSize = null;\n        this._rating = null;\n\n        this._mainEventBus.on('entityDied', this._onEntityDied.bind(this));\n    }\n\n    get world() {\n        return this._world;\n    }\n\n    setCurrentStep(currentStep, currentSeason) {\n        this._world.currentStep = currentStep;\n        this._world.currentSeason = currentSeason;\n    }\n\n    initRating(rating) {\n        this._rating = rating;\n    }\n\n    getRating() {\n        return this._rating;\n    }\n\n    playRatingAction(ratingAction) {\n        this._rating = ratingAction.ratingPlaces;\n        this._mainEventBus.emit('ratingUpdated');\n    }\n\n    playEntityAction(action) {\n        switch(action.type) {\n            case 'entity_born':\n                this.giveBirthToEntity(action.actionData.entity)\n                break;\n            default:\n                let actor = this.world.findEntityById(action.actorId);\n                actor.playAction(action);\n        }\n    }\n\n    playClimateAction(action) {\n        this._world.climate.playAction(action);\n    }\n\n    initWorld(worldJson, step, season) {\n        let entities = [];\n        worldJson.entities.forEach(entityJson => { \n            let entity = this._worldFactory.buildEntity(entityJson);\n            entities.push(entity);\n        });\n        \n        let colonies = [];\n        worldJson.ant_colonies.forEach(colonyJson => {\n            let colony = this._worldFactory.buildAntColony(colonyJson);\n            colonies.push(colony);\n        });\n        \n        this._world.initWorld(worldJson.size, entities, colonies, worldJson.climate, step, season);\n    }\n\n    getColoniesByIds(ids) {\n        let foundColonies = [];\n        for (let colony of this._world.colonies) {\n            if (ids.includes(colony.id)) {\n                foundColonies.push(colony);\n            }\n        }\n\n        return foundColonies;\n    }\n\n    giveBirthToEntity(entityJson) {\n        let entity = this._worldFactory.buildEntity(entityJson);\n        this._world.addEntity(entity);\n        this._mainEventBus.emit('entityBorn', entity);\n        switch (entity.type) {\n            case EntityTypes.ANT:\n                this._mainEventBus.emit('antBorn', entity);\n                break;\n            case EntityTypes.NEST:\n                this._mainEventBus.emit('nestBorn', entity);\n                break;\n        }\n    }\n\n    _onEntityDied(entity) {\n        this._world.deleteEntity(entity);\n        switch (entity.type) {\n            case EntityTypes.ANT:\n                this._mainEventBus.emit('antDied', entity);\n                break;\n            case EntityTypes.NEST:\n                this._mainEventBus.emit('nestDied', entity);\n                break;\n        }\n    }\n\n}\n\nexport {\n    WorldService\n};","import { CONSTS } from \"@domain/consts\";\n\nclass DomainWorker {\n\n    constructor(eventBus, entitySerializer, viewPointManager, requester, myStateCollector, worldStepEventsCollector, services) {\n        this._eventBus = eventBus;\n        this._entitySerializer = entitySerializer;\n        this._viewPointManager = viewPointManager;\n        this._requester = requester;\n\n        this._worldService = services.worldService;\n        this._accountService = services.accountService;\n        this._colonyService = services.colonyService;\n        this._userService = services.userService;\n        this._nuptialEnvironmentService = services.nuptialEnvironmentService;\n        this._nestService = services.nestService;\n        this._antService = services.antService;\n        this._messageHandlerService = services.messageHandlerService;\n\n        this._myStateCollector = myStateCollector;\n        this._worldStepEventsCollector = worldStepEventsCollector;\n\n        this._listenIncomeMessages();\n\n        this._entityActionAnimRequests = [];\n        this._chunkMigrations = [];\n        \n    }\n\n    _sendStepPack() {\n        let visibleChunkIds = this._viewPointManager.getVisibleChunkIds();\n\n        let entityAnimations = [];\n        for (let entityActionAR of this._entityActionAnimRequests) {\n            if (visibleChunkIds.includes(entityActionAR.chunkId)) {\n                entityAnimations.push(entityActionAR);\n            }\n        }\n        this._entityActionAnimRequests = [];\n\n        let viewRectMigrations = [];\n        for (let chunkMigration of this._chunkMigrations) {\n            let entity = chunkMigration.entity;\n            let isVisibleBefore = visibleChunkIds.includes(chunkMigration.prevChunkId);\n            let isVisibleAfter = visibleChunkIds.includes(entity.chunkId);\n            if (isVisibleBefore && !isVisibleAfter) {\n                viewRectMigrations.push({ isMigrationIntoViewRect: false, entityId: entity.id  });\n            } else if (!isVisibleBefore && isVisibleAfter) {\n                viewRectMigrations.push({ isMigrationIntoViewRect: true, entity: this._entitySerializer.serializeAnyEntity(entity) });\n            }\n        }\n        this._chunkMigrations = [];\n\n        let myStatePatch = this._myStateCollector.pullPatch();\n\n        let stepPack = {\n            step: this._worldService.world.currentStep,\n            season: this._worldService.world.currentSeason,\n            dailyTemperature: this._worldService.world.climate.dailyTemperature,\n            entityAnimations,\n            viewRectMigrations,\n            myStatePatch,\n            worldEvents: this._worldStepEventsCollector.pullStepEvents()\n        }\n        \n        this._sendMessage('stepPack', stepPack);\n    }\n\n    _handleCommand(command) {\n        switch (command.type) {\n            case 'init':\n                this._handleInitCommand(command)\n                break;\n            // case 'findMyFirstNest':\n            //     this._handleFindMyFirstNestCommand(command)\n            //     break;\n            case 'changePlayerViewPoint':\n                this._handleChangePlayerViewPointCommand(command)\n                break;\n            case 'getEntitiesInCurrentViewRect':\n                this._handleGetEntitiesInCurrentViewRectCommand(command)\n                break;\n            case 'getChunkShapesDebug':\n                this._handleGetChunkShapesDebugCommand(command)\n                break;\n            case 'getEntityDataById':\n                this._handleGetEntityDataByIdCommand(command)\n                break;\n            case 'getEnemyColonyData':\n                this._handleGetEnemyColonyDataCommand(command)\n                break;\n            case 'buildMarker':\n                this._handleBuildMarkerCommand(command)\n                break;\n            case 'saveSpecieSchema':\n                this._handleSaveSpecieSchemaCommand(command)\n                break;\n            case 'bornNewAntara':\n                this._handleBornNewAntaraCommand(command)\n                break;\n            case 'layEggInNest':\n                this._handleLayEggInNestCommand(command)\n                break;\n            case 'changeEggNameInNest':\n                this._handleChangeEggNameInNestCommand(command)\n                break;\n            case 'changeEggCasteInNest':\n                this._handleChangeEggCasteInNestCommand(command)\n                break;\n            case 'moveEggToLarvaInNest':\n                this._handleMoveEggToLarvaInNestCommand(command)\n                break;\n            case 'deleteEggInNest':\n                this._handleDeleteEggInNestCommand(command)\n                break;\n            case 'deleteLarvaInNest':\n                this._handleDeleteLarvaInNestCommand(command)\n                break;\n            case 'renameNest':\n                this._handleRenameNestCommand(command)\n                break;\n            case 'findClosestBugCorpseNearNest':\n                this._handleFindClosestBugCorpseNearNestCommand(command)\n                break;\n            case 'antRelocate':\n                this._handleAntRelocateCommand(command)\n                break;\n            case 'antChangeGuardianBehavior':\n                this._handleAntChangeGuardianBehaviorCommand(command)\n                break;\n            case 'antToggleCooperativeBehavior':\n                this._handleAntToggleCooperativeBehaviorCommand(command)\n                break;\n            case 'antFlyNuptialFlight':\n                this._handleAntFlyNuptialFlightCommand(command)\n                break;\n            case 'getRaidableArea':\n                this._handleGetRaidableAreaCommand(command)\n                break;\n            case 'getNestBuildableArea':\n                this._handleGetNestBuildableAreaCommand(command)\n                break;\n            case 'validateBuildingNewNestPosition':\n                this._handleValidateBuildingNewNestPositionCommand(command)\n                break;\n            case 'validateBreedingQueen':\n                this._handleValidateBreedingQueenCommand(command)\n                break;\n            case 'validateNewNestOperationConditions':\n                this._handleValidateNewNestOperationConditionsCommand(command)\n                break;\n            case 'validateBuildingSubNestPosition':\n                this._handleValidateBuildingSubNestPositionCommand(command)\n                break;\n            case 'validateDestroyNestOperationConditions':\n                this._handleValidateDestroyNestOperationConditionsCommand(command)\n                break;\n            case 'validateNestToDestroy':\n                this._handleValidateNestToDestroyCommand(command)\n                break;\n            case 'validatePillageNestOperationConditions':\n                this._handleValidatePillageNestOperationConditionsCommand(command)\n                break;\n            case 'validateNestToPillage':\n                this._handleValidateNestToPillageCommand(command)\n                break;\n            case 'validateLayingEggInNest':\n                this._handleValidateLayingEggInNestCommand(command)\n                break;\n            case 'foundColony':\n                this._handleFoundColonyCommand(command)\n                break;\n            case 'stopOperation':\n                this._handleStopOperationCommand(command)\n                break;\n            case 'buildNewSubNestOperation':\n                this._handleBuildNewSubNestOperationCommand(command)\n                break;\n            case 'destroyNestOperation':\n                this._handleDestroyNestOperationCommand(command)\n                break;\n            case 'pillageNestOperation':\n                this._handlePillageNestOperationCommand(command)\n                break;\n            case 'transportFoodOperation':\n                this._handleTransportFoodOperationCommand(command)\n                break;\n            case 'buildFortificationsOpearation':\n                this._handleBuildFortificationsOpearationCommand(command)\n                break;\n            case 'bringBugOpearation':\n                this._handleBringBugOpearationCommand(command)\n                break;\n            case 'logout':\n                this._handleLogoutCommand(command)\n                break;\n            case 'changeUsername':\n                this._handleChangeUsernameCommand(command)\n                break;\n            case 'changeEmail':\n                this._handleChangeEmailCommand(command)\n                break;\n            case 'verifyEmailRequest':\n                this._handleVerifyEmailRequestCommand(command)\n                break;\n            case 'validatePassword':\n                this._handleValidatePasswordCommand(command)\n                break;\n            case 'changePassword':\n                this._handleChangePasswordCommand(command)\n                break;\n            default:\n                throw 'unknown type of command';\n        }\n    }\n\n    _handleInitCommand(command) {\n        let data = command.data;\n        let userData = data.userData;\n        let mainSocketURL = data.mainSocketURL;\n        let csrftoken = data.csrftoken;\n\n        this._userService.setUserData(userData);\n        this._entitySerializer.setUserData(userData);\n        this._requester.setCsrfToken(csrftoken);\n        this._myStateCollector.setUserData(userData);\n\n        this._eventBus.once('initStepDone', () => {\n            this._viewPointManager.setChunks(this._worldService.world.chunks);\n            this._listenWorldActivity();\n\n            let initPack = {\n                currentStep: this._worldService.world.currentStep,\n                currentSeason: this._worldService.world.currentSeason,\n                dailyTemperature: this._worldService.world.climate.dailyTemperature,\n                worldSize: this._worldService.world.size,\n                consts: CONSTS,\n                myState: this._myStateCollector.getMyState(),\n                rating: this._worldService.getRating()\n            };\n            this._sendCommandResult(command.id, initPack);\n        });\n\n        this._messageHandlerService.connect(mainSocketURL);\n    }\n\n    _listenWorldActivity() {\n        this._eventBus.on('entityActionAnimationRequest', this._onEntityActionAnimationRequest.bind(this));\n        this._eventBus.on('entityChunkMigration', this._onEntityChunkMigration.bind(this));\n        this._eventBus.on('entityAddedToChunks', this._onEntityAddedToChunks.bind(this));\n        this._eventBus.on('stepDone', this._onStepDone.bind(this));\n\n        this._eventBus.on('emailVerified', this._onEmailVerified.bind(this));\n        this._eventBus.on('ratingUpdated', this._onRatingUpdated.bind(this));\n    }\n\n    _handleChangePlayerViewPointCommand(command) {\n        let data = command.data;\n        let isSomeChunkVisibilityChanged = this._viewPointManager.updateChunksVisibleStateForViewRect(data.viewRect);\n        let visibleEntities = [];\n        if (isSomeChunkVisibilityChanged) {\n            visibleEntities = this._viewPointManager.getEntitiesFromVisibleChunks();\n            let serializedEntities = [];\n            for (let entity of visibleEntities) {\n                serializedEntities.push(this._entitySerializer.serializeAnyEntity(entity));\n            }\n            this._sendCommandResult(command.id, { isSomeChunkVisibilityChanged: true, entities: serializedEntities });\n        } else {\n            this._sendCommandResult(command.id, { isSomeChunkVisibilityChanged: false, entities: [] });\n        }   \n    }\n\n    _handleGetEntitiesInCurrentViewRectCommand(command) {\n        let visibleEntities = this._viewPointManager.getEntitiesFromVisibleChunks();\n        let serializedEntities = this._entitySerializer.serializeAnyEntities(visibleEntities);\n        this._sendCommandResult(command.id, serializedEntities);\n    }\n\n    _handleGetChunkShapesDebugCommand(command) {\n        let chunkShapes = [];\n        for (let chunk of Object.values(this._viewPointManager.chunks)) {\n            chunkShapes.push(chunk.shape);\n        }\n        \n        this._sendCommandResult(command.id, chunkShapes);\n    }\n\n    _handleGetEntityDataByIdCommand(command) {\n        let data = command.data;\n        let entityId = data.id;\n        let entity = this._worldService.world.findEntityById(entityId);\n        let entityData = entity ? this._entitySerializer.serializeAnyEntity(entity) : null;\n        this._sendCommandResult(command.id, entityData);\n    }\n\n    _handleGetEnemyColonyDataCommand(command) {\n        let data = command.data;\n        let colonyId = data.colonyId;\n        let result = this._colonyService.getEnemyColonyData(colonyId);\n        this._sendCommandResult(command.id, result);\n    }\n\n    _handleBuildMarkerCommand(command) {\n        let data = command.data;\n        let type = data.type;\n        let point = data.point;\n        let params = data.params;\n        let marker = this._colonyService.buildMarker(type, point, params);\n        this._sendCommandResult(command.id, marker);\n    }\n\n    _handleSaveSpecieSchemaCommand(command) {\n        let data = command.data;\n        let specieSchema = data.specieSchema;\n        this._nuptialEnvironmentService.saveSpecieSchema(specieSchema);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleBornNewAntaraCommand(command) {\n        let data = command.data;\n        await this._nuptialEnvironmentService.bornNewAntara();\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleLayEggInNestCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let name = data.name;\n        let isFertilized = data.isFertilized;\n        let result = await this._nestService.layEggInNest(nestId, name, isFertilized);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleChangeEggNameInNestCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let eggId = data.eggId;\n        let name = data.name;\n        await this._nestService.changeEggNameInNest(nestId, eggId, name);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleChangeEggCasteInNestCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let eggId = data.eggId;\n        let antType = data.antType;\n        await this._nestService.changeEggCasteInNest(nestId, eggId, antType);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleMoveEggToLarvaInNestCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let eggId = data.eggId;\n        let result = await this._nestService.moveEggToLarvaInNest(nestId, eggId);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleDeleteEggInNestCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let eggId = data.eggId;\n        await this._nestService.deleteEggInNest(nestId, eggId);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleDeleteLarvaInNestCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let larvaId = data.larvaId;\n        await this._nestService.deleteLarvaInNest(nestId, larvaId);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleRenameNestCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let name = data.name;\n        await this._nestService.renameNest(nestId, name);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleFindClosestBugCorpseNearNestCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let bugcorpseData = await this._colonyService.findClosestBugCorpseNearNest(nestId);\n        let serializedBugCorpse = bugcorpseData ? this._entitySerializer.serializeAnyEntity(bugcorpseData) : null;\n        this._sendCommandResult(command.id, serializedBugCorpse);\n    }\n\n    async _handleAntRelocateCommand(command) {\n        let data = command.data;\n        let antId = data.antId;\n        let homeNestId = data.homeNestId;\n        await this._antService.antRelocate(antId, homeNestId);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleAntChangeGuardianBehaviorCommand(command) {\n        let data = command.data;\n        let antId = data.antId;\n        let behaviorValue = data.behaviorValue;\n        await this._antService.antChangeGuardianBehavior(antId, behaviorValue);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleAntToggleCooperativeBehaviorCommand(command) {\n        let data = command.data;\n        let antId = data.antId;\n        let isCooperative = data.isCooperative;\n        await this._antService.antToggleCooperativeBehavior(antId, isCooperative);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleAntFlyNuptialFlightCommand(command) {\n        let data = command.data;\n        let antId = data.antId;\n        await this._antService.antFlyNuptialFlight(antId);\n        this._sendCommandResult(command.id, true);\n    }\n\n    _handleGetRaidableAreaCommand(command) {\n        let data = command.data;\n        let raidingColonyId = data.raidingColonyId;\n        let raidAreaCenter = data.raidAreaCenter;\n        let chunkIds = this._viewPointManager.getVisibleChunkIds();\n        let result = this._colonyService.getRaidableArea(raidingColonyId, raidAreaCenter, chunkIds);\n        this._sendCommandResult(command.id, result);\n    }\n\n    _handleGetNestBuildableAreaCommand(command) {\n        let data = command.data;\n        let mainNestPosition = data.mainNestPosition;\n        let chunkIds = this._viewPointManager.getVisibleChunkIds();\n        let result = this._colonyService.getNestBuildableArea(mainNestPosition, chunkIds);\n        this._sendCommandResult(command.id, result);\n    }\n\n    _handleValidateBuildingNewNestPositionCommand(command) {\n        let data = command.data;\n        let position = data.position;\n        let errId = this._colonyService.validateBuildingNewNestPosition(position);\n        this._sendCommandResult(command.id, errId);\n    }\n\n    _handleValidateBreedingQueenCommand(command) {\n        let data = command.data;\n        let queenId = data.queenId;\n        let errId = this._colonyService.validateBreedingQueen(queenId);\n        this._sendCommandResult(command.id, errId);\n    }\n\n    _handleValidateNewNestOperationConditionsCommand(command) {\n        let data = command.data;\n        let err = this._colonyService.validateNewNestOperationConditions(data.colonyId);\n        this._sendCommandResult(command.id, err);\n    }\n\n    _handleValidateBuildingSubNestPositionCommand(command) {\n        let data = command.data;\n        let position = data.position;\n        let err = this._colonyService.validateBuildingSubNestPosition(position);\n        this._sendCommandResult(command.id, err);\n    }\n\n    _handleValidateDestroyNestOperationConditionsCommand(command) {\n        let data = command.data;\n        let err = this._colonyService.validateDestroyNestOperationConditions(data.colonyId);\n        this._sendCommandResult(command.id, err);\n    }\n\n    _handleValidateNestToDestroyCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let err = this._colonyService.validateNestToDestroy(nestId);\n        this._sendCommandResult(command.id, err);\n    }\n\n    _handleValidatePillageNestOperationConditionsCommand(command) {\n        let data = command.data;\n        let colonyId = data.colonyId;\n        let err = this._colonyService.validatePillageNestOperationConditions(colonyId);\n        this._sendCommandResult(command.id, err);\n    }\n\n    _handleValidateNestToPillageCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let err = this._colonyService.validateNestToPillage(nestId);\n        this._sendCommandResult(command.id, err);\n    }\n\n    _handleValidateLayingEggInNestCommand(command) {\n        let data = command.data;\n        let nestId = data.nestId;\n        let err = this._nestService.validateLayingEggInNest(nestId);\n        this._sendCommandResult(command.id, err);\n    }\n\n    async _handleFoundColonyCommand(command) {\n        let data = command.data;\n        let queenId = data.queenId;\n        let nuptialMaleId = data.nuptialMaleId;\n        let nestBuildingSite = data.nestBuildingSite;\n        let colonyName = data.colonyName;\n        let result = await this._nuptialEnvironmentService.foundColony(queenId, nuptialMaleId, nestBuildingSite, colonyName);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleStopOperationCommand(command) {\n        let data = command.data;\n        let colonyId = data.colonyId;\n        let operationId = data.operationId;\n        await this._colonyService.stopOperation(colonyId, operationId);\n        this._sendCommandResult(command.id, true);\n    }\n\n    async _handleBuildNewSubNestOperationCommand(command) {\n        let data = command.data;\n        let performingColonyId = data.performingColonyId;\n        let buildingSite = data.buildingSite;\n        let workersCount = data.workersCount;\n        let warriorsCount = data.warriorsCount;\n        let nestName = data.nestName;\n        let result = await this._colonyService.buildNewSubNestOperation(performingColonyId, buildingSite, workersCount, warriorsCount, nestName);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleDestroyNestOperationCommand(command) {\n        let data = command.data;\n        let performingColonyId = data.performingColonyId;\n        let nestId = data.nestId;\n        let workersCount = data.workersCount;\n        let warriorsCount = data.warriorsCount;\n        let result = await this._colonyService.destroyNestOperation(performingColonyId, warriorsCount, workersCount, nestId);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handlePillageNestOperationCommand(command) {\n        let data = command.data;\n        let performingColonyId = data.performingColonyId;\n        let pillagingNestId = data.pillagingNestId;\n        let nestForLootId = data.nestForLootId;\n        let workersCount = data.workersCount;\n        let warriorsCount = data.warriorsCount;\n        let result = await this._colonyService.pillageNestOperation(performingColonyId, pillagingNestId, nestForLootId, warriorsCount, workersCount);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleTransportFoodOperationCommand(command) {\n        let data = command.data;\n        let performingColonyId = data.performingColonyId;\n        let fromNestId = data.fromNestId;\n        let toNestId = data.toNestId;\n        let workersCount = data.workersCount;\n        let warriorsCount = data.warriorsCount;\n        let result = await this._colonyService.transportFoodOperation(performingColonyId, fromNestId, toNestId, workersCount, warriorsCount);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleBuildFortificationsOpearationCommand(command) {\n        let data = command.data;\n        let performingColonyId = data.performingColonyId;\n        let nestId = data.nestId;\n        let workersCount = data.workersCount;\n        let result = await this._colonyService.buildFortificationsOpearation(performingColonyId, nestId, workersCount);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleBringBugOpearationCommand(command) {\n        let data = command.data;\n        let performingColonyId = data.performingColonyId;\n        let nestId = data.nestId;\n        let result = await this._colonyService.bringBugOpearation(performingColonyId, nestId);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleLogoutCommand(command) {\n        let data = command.data;\n        let redirectUrl = await this._accountService.logout();\n        this._sendCommandResult(command.id, redirectUrl);\n    }\n\n    async _handleChangeUsernameCommand(command) {\n        let data = command.data;\n        let newUsername = data.newUsername;\n        let result = await this._accountService.changeUsername(newUsername);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleChangeEmailCommand(command) {\n        let data = command.data;\n        let newEmail = data.newEmail;\n        let password = data.password;\n        let result = await this._accountService.changeEmail(newEmail, password);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleVerifyEmailRequestCommand(command) {\n        this._accountService.verifyEmailRequest();\n    }\n\n    async _handleValidatePasswordCommand(command) {\n        let data = command.data;\n        let password = data.password;\n        let result = this._accountService.validatePassword(password);\n        this._sendCommandResult(command.id, result);\n    }\n\n    async _handleChangePasswordCommand(command) {\n        let data = command.data;\n        let newPassword = data.newPassword;\n        let oldPassword = data.oldPassword;\n        let result = await this._accountService.changePassword(newPassword, oldPassword);\n        this._sendCommandResult(command.id, result);\n    }\n\n    _sendCommandResult(id, result) {\n        this._sendMessage('commandResult', {\n            id,\n            result\n        });\n    }\n\n    _sendEvent(type, data) {\n        this._sendMessage('event', {\n            type,\n            data\n        });\n    }\n\n    _sendMessage(type, data) {\n        postMessage({\n            type,\n            data\n        });\n    }\n\n    _listenIncomeMessages() {\n        onmessage = (e) => {\n            let msg = e.data;\n            switch (msg.type) {\n                case 'command':\n                    this._handleCommand(msg.data);\n                    break;\n                default:\n                    throw 'unknown type of message';\n            }\n        }\n    }\n\n    _onStepDone() {\n        this._sendStepPack();\n    }\n\n    _onEntityActionAnimationRequest(chunkId, entityId, actionType, animationParams) {\n        this._entityActionAnimRequests.push({\n            chunkId, entityId, actionType, animationParams\n        });\n    }\n\n    _onEntityChunkMigration(entity, prevChunkId) {\n        this._chunkMigrations.push({\n            entity, prevChunkId\n        });\n    }\n\n    _onEntityAddedToChunks(entity) {\n        this._chunkMigrations.push({\n            entity, \n            prevChunkId: null\n        });\n    }\n\n    _onEmailVerified() {\n        this._sendEvent('emailVerified');\n    }\n\n    _onRatingUpdated() {\n        this._sendEvent('ratingUpdated', { \n            rating: this._worldService.getRating() \n        });\n    }\n\n}\n\nexport {\n    DomainWorker\n}","class MyStateCollector {\n\n    constructor(eventBus, world, nuptialEnv, userService, entitySerializer, colonySerializer) {\n        this._eventBus = eventBus;\n        this._world = world;\n        this._nuptialEnv = nuptialEnv;\n        this._userService = userService;\n        this._entitySerializer = entitySerializer;\n        this._colonySerializer = colonySerializer;\n\n        this._resetMyStatePatch();\n\n        this._eventBus.once('initStepDone', this._onInitStepDone.bind(this));\n        this._eventBus.on('nestBorn', this._onNestBorn.bind(this));\n        this._eventBus.on('nestDied', this._onNestDied.bind(this));\n        this._eventBus.on('antBorn', this._onAntBorn.bind(this));\n        this._eventBus.on('antDied', this._onAntDied.bind(this));\n        this._eventBus.on('colonyBorn', this._onColonyBorn.bind(this));\n        this._eventBus.on('colonyDied', this._onColonyDied.bind(this));\n        this._eventBus.on('specieChromosomesGenesChanged', this._onSpecieChromosomesSpecieGenesChanged.bind(this));\n        this._eventBus.on('nuptialMalesChanged', this._onNuptialMalesChanged.bind(this));\n        this._eventBus.on('newNotification', this._onNewNotification.bind(this));\n    }\n\n    setUserData(userData) {\n        this._userData = userData;\n    }\n\n    getMyState() {\n        let colonies = this._world.findColoniesByOwnerId(this._userData.id);\n        let nests = this._world.findNestsByOwner(this._userData.id);\n        let ants = this._world.findAntsByOwnerId(this._userData.id);\n        let queenInNuptialFlightIds = ants.filter(a => a.isInNuptialFlight).map(a => a.id);\n\n        return {\n            colonies: this._colonySerializer.serializeColonies(colonies),\n            nests: this._entitySerializer.serializeNests(nests),\n            ants: this._entitySerializer.serializeAnts(ants),\n            nuptialEnvironment: {\n                queens: queenInNuptialFlightIds,\n                males: this._nuptialEnv.nuptialMales,\n                specie: this._nuptialEnv.specieData\n            },\n            notificationsContainer: {\n                notifications: this._userService.getNotifications()\n            }\n        }\n    }\n\n    pullPatch() {\n        let patch = this._myStatePatch;\n        this._resetMyStatePatch();\n        return patch;\n    }\n\n    _resetMyStatePatch() {\n        this._myStatePatch = {\n            nests: {\n                add: [],\n                update: [],\n                remove: []\n            },\n            ants: {\n                add: [],\n                update: [],\n                remove: []\n            },\n            colonies: {\n                add: [],\n                update: [],\n                remove: []\n            },\n            nuptialEnvironment: {\n                props: {},\n                queens: {\n                    add: [],\n                    remove: []\n                },\n                specie: {\n                    specieChromosomes: {\n                        update: []\n                    }\n                }\n            },\n            notificationsContainer: {\n                add: []\n            }\n        };\n    }\n\n    _onInitStepDone() {\n        this._listenMyNests();\n        this._listenAnts();\n        this._listenColonies();\n    }\n\n    _listenColonies() {\n        let colonies = this._world.findColoniesByOwnerId(this._userData.id);\n        for (let colony of colonies) {\n            this._listenColony(colony);\n        }\n    }\n\n    _listenColony(colony) {\n        colony.events.on('addedOperation', (newOperation) => {\n            this._pushOperationAddToColonyUpdatePatch(colony.id, newOperation);\n        });\n        colony.events.on('operationChanged', (operation) => {\n            this._pushOperationPropsToOperationUpdatePatch(colony.id, operation.id, {\n                status: operation.status,\n                hiredWarriorsCount: operation.hiredWarriorsCount,\n                hiredWorkersCount: operation.hiredWorkersCount\n            });\n        });\n        colony.events.on('operationDeleted', (operationId) => {\n            this._pushOperationRemoveToColonyUpdatePatch(colony.id, operationId);\n        });\n        colony.events.on('enemiesChanged', () => {\n            this._pushEnemiesToColonyUpdatePatch(colony.id, colony.enemies);\n        });\n    }\n\n    _pushEnemiesToColonyUpdatePatch(colonyId, enemies) {\n        let patch = this._getColonyUpdatePatch(colonyId);\n        patch.props.enemies = enemies;\n    }\n\n    _pushOperationAddToColonyUpdatePatch(colonyId, newOperation) {\n        let patch = this._getColonyUpdatePatch(colonyId);\n        let serializedOperation = this._colonySerializer.serializeOperation(newOperation);\n        patch.operations.add.push(serializedOperation);\n    }\n\n    _pushOperationPropsToOperationUpdatePatch(colonyId, operationId, props) {\n        let operationUpdatePatch = this._getOperationUpdatePatch(colonyId, operationId);\n        Object.assign(operationUpdatePatch.props, props);\n    }\n\n    _pushOperationRemoveToColonyUpdatePatch(colonyId, operationId) {\n        let patch = this._getColonyUpdatePatch(colonyId);\n        patch.operations.remove.push(operationId);\n    }\n\n    _getColonyUpdatePatch(colonyId) {\n        for (let colonyUpdatePatch of this._myStatePatch.colonies.update) {\n            if (colonyUpdatePatch.id == colonyId) {\n                return colonyUpdatePatch;\n            }\n        }\n\n        let colonyUpdatePatch = { \n            id: colonyId, \n            props: {}, \n            operations: {\n                add: [],\n                update: [],\n                remove: []\n            }\n        };\n        this._myStatePatch.colonies.update.push(colonyUpdatePatch);\n        return colonyUpdatePatch;\n    }\n\n    _getOperationUpdatePatch(colonyId, operationId) {\n        let colonyUpdatePatch = this._getColonyUpdatePatch(colonyId);\n        for (let operationUpdatePatch of colonyUpdatePatch.operations.update) {\n            if (operationUpdatePatch.id == operationId) {\n                return operationUpdatePatch;\n            }\n        }\n\n        let operationUpdatePatch = {\n            id: operationId,\n            props: {}\n        }\n        colonyUpdatePatch.operations.update.push(operationUpdatePatch);\n        return operationUpdatePatch;\n    }\n\n    _listenAnts() {\n        let ants = this._world.findAntsByOwnerId(this._userData.id);\n        for (let ant of ants) {\n            this._listenAnt(ant);\n        }\n    }\n\n    _listenAnt(ant) {\n        ant.events.on('homeNestChanged', () => {\n            this._pushAntPropsToAntUpdatePatch(ant.id, {\n                homeNestId: ant.homeNestId\n            });\n        });\n        ant.events.on('currentActivityChanged', () => {\n            this._pushAntPropsToAntUpdatePatch(ant.id, {\n                currentActivity: ant.currentActivity\n            });\n        });\n        ant.events.on('isHungryChanged', () => {\n            this._pushAntPropsToAntUpdatePatch(ant.id, {\n                isHungry: ant.isHungry\n            });\n        });\n        ant.events.on('guardianBehaviorChanged', () => {\n            this._pushAntPropsToAntUpdatePatch(ant.id, {\n                guardianBehavior: ant.guardianBehavior\n            });\n        });\n        ant.events.on('isCooperativeBehaviorChanged', () => {\n            this._pushAntPropsToAntUpdatePatch(ant.id, {\n                isCooperativeBehavior: ant.isCooperativeBehavior\n            });\n        });\n        ant.events.on('isInNuptialFlightChanged', () => {\n            if (ant.isInNuptialFlight) {\n                this._pushQueenAntToNuptialEnvironment(ant.id);\n            } else {\n                this._pullQueenAntFromNuptialEnvironment(ant.id);\n            }\n        });\n        ant.events.on('fromColonyChanged', () => {\n            this._pushAntPropsToAntUpdatePatch(ant.id, {\n                fromColony: ant.fromColony\n            });\n        });\n        ant.events.on('gotFertilized', () => {\n            this._pushAntPropsToAntUpdatePatch(ant.id, {\n                canFlyNuptialFlight: ant.canFlyNuptialFlight,\n                isQueenOfColony: ant.isQueenOfColony,\n                breedingMaleGenome: this._entitySerializer.serializeGenome(ant.breedingMaleGenome),\n            });\n        });\n    }\n\n    _pushQueenAntToNuptialEnvironment(antId) {\n        this._myStatePatch.nuptialEnvironment.queens.add.push(antId);\n    }\n\n    _pullQueenAntFromNuptialEnvironment(antId) {\n        this._myStatePatch.nuptialEnvironment.queens.remove.push(antId);\n    }\n\n    _pushAntPropsToAntUpdatePatch(antId, props) {\n        let antUpdatePatch = this._getAntUpdatePatch(antId);\n        Object.assign(antUpdatePatch.props, props);\n    }\n\n    _getAntUpdatePatch(antId) {\n        for (let antPatch of this._myStatePatch.ants.update) {\n            if (antPatch.id == antId) {\n                return antPatch;\n            }\n        }\n\n        let antUpdatePatch = { \n            id: antId, \n            props: {}, \n        };\n        this._myStatePatch.ants.update.push(antUpdatePatch);\n        return antUpdatePatch;\n    }\n\n    _listenMyNests() {\n        let nests = this._world.findNestsByOwner(this._userData.id);\n        for (let nest of nests) {\n            this._listenNest(nest);\n        }\n    }\n\n    _listenNest(nest) {\n        nest.events.on('storedCaloriesChanged', () => {\n            this._pushNestPropsToNestUpdatePatch(nest.id, { storedCalories: nest.storedCalories });\n        });\n        nest.events.on('nameChanged', () => {\n            this._pushNestPropsToNestUpdatePatch(nest.id, { name: nest.name });\n        });\n        nest.events.on('eggAdded', (egg) => {\n            this._pushEggAddToNestUpdatePatch(nest.id, egg);\n        });\n        nest.events.on('eggUpdated', (eggId, props) => {\n            this._pushEggPropsToEggUpdatePatch(nest.id, eggId, props);\n        });\n        nest.events.on('eggRemoved', (eggId) => {\n            this._pushEggRemoveToNestUpdatePatch(nest.id, eggId);\n        });\n        nest.events.on('larvaAdded', (larva) => {\n            this._pushLarvaAddToNestUpdatePatch(nest.id, larva);\n        });\n        nest.events.on('larvaUpdated', (larvaId, props) => {\n            this._pushLarvaPropsToLarvaUpdatePatch(nest.id, larvaId, props);\n        });\n        nest.events.on('larvaRemoved', (larvaId) => {\n            this._pushLarvaRemoveToNestUpdatePatch(nest.id, larvaId);\n        });\n\n    }\n\n    _pushLarvaAddToNestUpdatePatch(nestId, newLarva) {\n        let patch = this._getNestUpdatePatch(nestId);\n        let serializedLarva = this._entitySerializer.serializeLarva(newLarva);\n        patch.larvae.add.push(serializedLarva);\n    }\n\n    _pushLarvaPropsToLarvaUpdatePatch(nestId, larvaId, props) {\n        let larvaPatch = this._getLarvaUpdatePatch(nestId, larvaId);\n        Object.assign(larvaPatch.props, props);\n    }\n\n    _pushLarvaRemoveToNestUpdatePatch(nestId, larvaId) {\n        let nestPatch = this._getNestUpdatePatch(nestId);\n        nestPatch.larvae.remove.push(larvaId);\n    }\n\n    _pushEggAddToNestUpdatePatch(nestId, newEgg) {\n        let patch = this._getNestUpdatePatch(nestId);\n        let serializedEgg = this._entitySerializer.serializeEgg(newEgg);\n        patch.eggs.add.push(serializedEgg);\n    }\n\n    _pushEggPropsToEggUpdatePatch(nestId, eggId, props) {\n        let eggPatch = this._getEggUpdatePatch(nestId, eggId);\n        Object.assign(eggPatch.props, props);\n    }\n\n    _pushEggRemoveToNestUpdatePatch(nestId, eggId) {\n        let nestPatch = this._getNestUpdatePatch(nestId);\n        nestPatch.eggs.remove.push(eggId);\n    }\n\n    _pushNestPropsToNestUpdatePatch(nestId, props) {\n        let patch = this._getNestUpdatePatch(nestId);\n        Object.assign(patch.props, props);\n    }\n\n    _getNestUpdatePatch(nestId) {\n        for (let nestPatch of this._myStatePatch.nests.update) {\n            if (nestPatch.id == nestId) {\n                return nestPatch;\n            }\n        }\n\n        let nestUpdatePatch = { \n            id: nestId, \n            props: {}, \n            eggs: {\n                add: [],\n                update: [],\n                remove: []\n            },\n            larvae: {\n                add: [],\n                update: [],\n                remove: []\n            }\n        };\n        this._myStatePatch.nests.update.push(nestUpdatePatch);\n        return nestUpdatePatch;\n    }\n\n    _getEggUpdatePatch(nestId, eggId) {\n        let nestUpdatePatch = this._getNestUpdatePatch(nestId);\n        for (let eggUpdatePatch of nestUpdatePatch.eggs.update) {\n            if (eggUpdatePatch.id == eggId) {\n                return eggUpdatePatch;\n            }\n        }\n\n        let eggUpdatePatch = {\n            id: eggId,\n            props: {}\n        }\n        nestUpdatePatch.eggs.update.push(eggUpdatePatch);\n        return eggUpdatePatch;\n    }\n\n    _getLarvaUpdatePatch(nestId, larvaId) {\n        let nestUpdatePatch = this._getNestUpdatePatch(nestId);\n        for (let larvaUpdatePatch of nestUpdatePatch.larvae.update) {\n            if (larvaUpdatePatch.id == larvaId) {\n                return larvaUpdatePatch;\n            }\n        }\n\n        let larvaUpdatePatch = {\n            id: larvaId,\n            props: {}\n        }\n        nestUpdatePatch.larvae.update.push(larvaUpdatePatch);\n        return larvaUpdatePatch;\n    }\n\n    _isEntityMy(entity) {\n        return entity.ownerId == this._userData.id;\n    }\n\n    _isColonyMy(colony) {\n        return colony.ownerId == this._userData.id;\n    }\n\n    _onColonyBorn(colony) {\n        if (this._isColonyMy(colony)) {\n            let serializedColony = this._colonySerializer.serializeColony(colony);\n            this._myStatePatch.colonies.add.push(serializedColony);\n            this._listenColony(colony);\n        }\n    }\n\n    _onColonyDied(colony) {\n        if (this._isColonyMy(colony)) {\n            this._myStatePatch.colonies.remove.push(colony.id);\n        }\n    }\n\n    _onAntBorn(ant) {\n        if (this._isEntityMy(ant)) {\n            let serializedAnt = this._entitySerializer.serializeAnt(ant);\n            this._myStatePatch.ants.add.push(serializedAnt);\n            this._listenAnt(ant);\n        }\n    }\n\n    _onAntDied(ant) {\n        if (this._isEntityMy(ant)) {\n            this._myStatePatch.ants.remove.push(ant.id);\n            if (ant.isInNuptialFlight) {\n                this._pullQueenAntFromNuptialEnvironment(ant.id);\n            }\n        }\n    }\n\n    _onNestBorn(nest) {\n        if (this._isEntityMy(nest)) {\n            let serializedNest = this._entitySerializer.serializeNest(nest);\n            this._myStatePatch.nests.add.push(serializedNest);\n            this._listenNest(nest);\n        }\n    }\n\n    _onNestDied(nest) {\n        if (this._isEntityMy(nest)) {\n            this._myStatePatch.nests.remove.push(nest.id);\n        }\n    }\n\n    _onNuptialMalesChanged() {\n        this._myStatePatch.nuptialEnvironment.props.males = this._nuptialEnv.nuptialMales;\n    }\n\n    _onSpecieChromosomesSpecieGenesChanged(specieChromosomeSpecieGenesChange) {\n        let specieUpdatePatch = this._myStatePatch.nuptialEnvironment.specie;\n        for (let specieChromosomeType in specieChromosomeSpecieGenesChange) {\n            let specieGenes = specieChromosomeSpecieGenesChange[specieChromosomeType]\n            let specieChromosomeUpdatePatch = {\n                type: specieChromosomeType,\n                props: {\n                    specieGenes \n                }\n            };\n            specieUpdatePatch.specieChromosomes.update.push(specieChromosomeUpdatePatch);\n        }\n    }\n\n    _onNewNotification(notification) {\n        this._myStatePatch.notificationsContainer.add.push(notification);\n    }\n\n}\n\nexport {\n    MyStateCollector\n}","class ColonySerializer {\n\n    serializeColonies(colonies) {\n        let serializedColonies = [];\n        for (let colony of colonies) {\n            serializedColonies.push(this.serializeColony(colony));\n        }\n        return serializedColonies;\n    }\n\n    serializeColony(colony) {\n        let serializedOperations = [];\n        for (let operation of colony.operations) {\n            serializedOperations.push(this.serializeOperation(operation));\n        }\n        return {\n            'id': colony.id,\n            'name': colony.name,\n            'operations': serializedOperations,\n            'enemies': colony.enemies\n        };\n    }\n\n    serializeMarker(marker) {\n        return {\n            'type': marker.type,\n            'point': marker.point,\n            'params': marker.params\n        }\n    }\n\n    serializeOperations(operations) {\n        let serializedOperations = [];\n        for (let operation of operations) {\n            serializedOperations.push(this.serializeOperation(operation));\n        }\n\n        return serializedOperations;\n    }\n\n    serializeOperation(operation) {\n        let serializedMarkers = [];\n        for (let marker of operation.markers) {\n            serializedMarkers.push(this.serializeMarker(marker));\n        }\n        return {\n            'id': operation.id,\n            'name': operation.name,\n            'status': operation.status,\n            'markers': serializedMarkers,\n            'workerVacanciesCount': operation.workerVacanciesCount,\n            'warriorVacanciesCount': operation.warriorVacanciesCount,\n            'hiredWorkersCount': operation.hiredWorkersCount,\n            'hiredWarriorsCount': operation.hiredWarriorsCount,\n            'test': 123\n        }\n    }\n}\n\nexport {\n    ColonySerializer\n}","import { EntityTypes } from \"@domain/enum/entityTypes\";\nimport { AntTypes } from \"@domain/enum/antTypes\";\n\nclass EntitySerializer {\n\n    setUserData(userData) {\n        this._userData = userData;\n    }\n\n    serializeAnyEntities(entities) {\n        let serializedEntities = [];\n        for (let entity of entities) {\n            serializedEntities.push(this.serializeAnyEntity(entity));\n        }\n        return serializedEntities;\n    }\n\n    serializeAnyEntity(entity) {\n        switch (entity.type) {\n            case EntityTypes.ANT:\n                return this.serializeAnt(entity);\n            case EntityTypes.ITEM:\n                return this.serializeItem(entity);\n            case EntityTypes.ITEM_AREA:\n                return this.serializeItemArea(entity);\n            case EntityTypes.ITEM_SOURCE:\n                return this.serializeItemSource(entity);\n            case EntityTypes.LADYBUG:\n                return this.serializeLadybug(entity);\n            case EntityTypes.NEST:\n                return this.serializeNest(entity);\n            case EntityTypes.TREE:\n                return this.serializeTree(entity);\n        }\n    }\n\n    serializeItemArea(itemArea) {\n        let json = this._serializeBaseEntity(itemArea);\n        return json;\n    }\n\n    serializeTree(tree) {\n        let json = this._serializeBaseEntity(tree);\n        return json;\n    }\n\n    serializeLadybug(ladybug) {\n        let json = this._serializeLiveEntity(ladybug);\n        json = Object.assign(json, {\n        });\n        return json;\n    }\n\n    serializeItemSource(itemSource) {\n        let json = this._serializeBaseEntity(itemSource);\n        json = Object.assign(json, {\n            itemType: itemSource.itemType,\n            isDamaged: itemSource.isDamaged,\n            accumulated: itemSource.accumulated,\n            maxAccumulated: itemSource.maxAccumulated,\n            fertility: itemSource.fertility\n        });\n        return json;\n    }\n\n    serializeItem(item) {\n        let json = this._serializeBaseEntity(item);\n        json = Object.assign(json, {\n            itemType: item.itemType,\n            itemVariety: item.itemVariety,\n            isPicked: item.isPicked,\n            isBringing: item.isBringing\n        });\n        return json;\n    }\n\n    serializeAnt(ant) {\n        switch (ant.antType) {\n            case AntTypes.MALE:\n                return this._serializeMaleAnt(ant);\n            case AntTypes.QUEEN:\n                return this._serializeQueenAnt(ant);\n            case AntTypes.WARRIOR:\n                return this._serializeWarriorAnt(ant);\n            case AntTypes.WORKER:\n                return this._serializeWorkerAnt(ant);\n            default:\n                throw 'unknown type of ant';\n        }\n    }\n\n    serializeAnts(ants) {\n        let serializedAnts = [];\n        for (let ant of ants) {\n            serializedAnts.push(this.serializeAnt(ant));\n        }\n        return serializedAnts;\n    }\n\n    _serializeMaleAnt(ant) {\n        let json = this._serializeBaseAnt(ant);\n        return json;\n    }\n\n    _serializeQueenAnt(ant) {\n        let json = this._serializeBaseAnt(ant);\n        json = Object.assign(json, {\n            isFertilized: ant.isFertilized,\n            breedingMaleGenome: ant.breedingMaleGenome ? this.serializeGenome(ant.breedingMaleGenome) : null,\n        });\n        return json;\n    }\n\n    _serializeWarriorAnt(ant) {\n        let json = this._serializeBaseAnt(ant);\n        return json;\n    }\n\n    _serializeWorkerAnt(ant) {\n        let json = this._serializeBaseAnt(ant);\n        return json;\n    }\n\n    _serializeBaseAnt(ant) {\n        let json = this._serializeLiveEntity(ant);\n        json = Object.assign(json, {\n            name: ant.name,\n            antType: ant.antType,\n            stats: ant.stats,\n            genome: this.serializeGenome(ant.genome),\n            birthStep: ant.birthStep,\n            currentActivity: ant.currentActivity,\n            isHungry: ant.isHungry,\n            pickedItemId: ant.pickedItemId,\n            homeNestId: ant.homeNestId,\n            guardianBehavior: ant.guardianBehavior,\n            isCooperativeBehavior: ant.isCooperativeBehavior,\n            isQueenOfColony: ant.isQueenOfColony,\n            canFlyNuptialFlight: ant.canFlyNuptialFlight,\n            canBeCooperative: ant.canBeCooperative,\n            canBeGuardian: ant.canBeGuardian,\n        });\n        return json;\n    }\n\n    serializeNests(nests) {\n        let serializedNests = [];\n        for (let nest of nests) {\n            serializedNests.push(this.serializeNest(nest));\n        }\n        return serializedNests;\n    }\n\n    serializeNest(nest) {\n        let json = this._serializeBaseEntity(nest);\n        json = Object.assign(json, {\n            storedCalories: nest.storedCalories,\n            fortification: nest.fortification,\n            maxFortification: nest.maxFortification,\n            name: nest.name,\n            isMain: nest.isMain,\n            area: nest.area,\n            isBuilt: nest.isBuilt,\n            larvae: this.serializeLarvae(nest.larvae),\n            eggs: this.serializeEggs(nest.eggs)\n        });\n        return json;\n    }\n\n    serializeEggs(eggs) {\n        let serializedEggs = [];\n        for (let egg of eggs) {\n            serializedEggs.push(this.serializeEgg(egg));\n        }\n        return serializedEggs;\n    }\n\n    serializeEgg(egg) {\n        return {\n            id: egg.id,\n            name: egg.name,\n            genome: this.serializeGenome(egg.genome),\n            progress: egg.progress,\n            state: egg.state,\n            antType: egg.antType,\n            isFertilized: egg.isFertilized,\n            avaliableAntTypes: egg.avaliableAntTypes,\n        }\n    }\n    \n    serializeLarvae(larvae) {\n        let serialized = []\n        for (let larva of larvae) {\n            serialized.push(this.serializeLarva(larva));\n        }\n        return serialized;\n    }\n\n    serializeLarva(larva) {\n        return {\n            id: larva.id,\n            name: larva.name,\n            antType: larva.antType,\n            ateFood: larva.ateFood,\n            requiredFood: larva.requiredFood,\n            genome: this.serializeGenome(larva.genome)\n        };\n    }\n\n    serializeGenome(genome) {\n        return {\n            maternal: this.serializeChromosomesSet(genome.maternal),\n            paternal: genome.paternal ? this.serializeChromosomesSet(genome.paternal) : null,\n        };\n    }\n\n    serializeChromosomesSet(chromosomesSet) {\n        return chromosomesSet.chromosomes;\n    }\n\n    _serializeBaseEntity(entity) {\n        return {\n            id: entity.id,\n            position: entity.position,\n            type: entity.type,\n            fromColony: entity.fromColony,\n            isMine: this._userData.id == entity.ownerId,\n            hp: entity.hp,\n            maxHp: entity.maxHp,\n            isDied: entity.isDied,\n            isVisible: entity.isVisible,\n            angle: entity.angle\n        }\n    }\n\n    _serializeLiveEntity(entity) {\n        let json = this._serializeBaseEntity(entity);\n        json = Object.assign(json, {\n            isInHibernation: entity.isInHibernation\n        });\n        return json;\n    }\n}\n\nexport {\n    EntitySerializer\n}","class ViewPointManager {\n\n    constructor() {\n        this._chunksVisibilityState = {};\n    }\n\n    get chunks() {\n        return this._chunks;\n    }\n\n    setChunks(chunks) {\n        this._chunks = chunks;\n\n        for (let chunkId in chunks) {\n            this._chunksVisibilityState[chunkId] = false;\n        }\n    }\n\n    isChunkVisible(chunkId) {\n        return this._chunksVisibilityState[chunkId];\n    }\n\n    getVisibleChunkIds() {\n        let visibleChunkIds = [];\n        for (let chunkId in this._chunksVisibilityState) {\n            if (this._chunksVisibilityState[chunkId]) {\n                visibleChunkIds.push(chunkId);\n            }\n        }\n\n        return visibleChunkIds;\n    }\n\n    updateChunksVisibleStateForViewRect(viewRect) {\n        let isSomeChunkVisibilityChanged = false;\n        for (let chunkId in this._chunks) {\n            let chunk = this._chunks[chunkId];\n            let isVisibleChunk = chunk.intersectsRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);\n            let isStateChanged = this._chunksVisibilityState[chunkId] != isVisibleChunk\n            this._chunksVisibilityState[chunkId] = isVisibleChunk;\n            if (isStateChanged) {\n                isSomeChunkVisibilityChanged = true;\n            }\n        }\n\n        return isSomeChunkVisibilityChanged;\n    }\n\n    getEntitiesFromVisibleChunks() {\n        let entities = [];\n        for (let chunkId in this._chunks) {\n            if (this.isChunkVisible(chunkId)) {\n                let chunk = this._chunks[chunkId];\n                entities = entities.concat(chunk.entities);\n            }\n        }\n\n        return entities;\n    }\n}\n\nexport {\n    ViewPointManager\n}","class WorldStepEventsCollector {\n\n    constructor(eventBus) {\n        this._eventBus = eventBus;\n        this._stepEvents = [];\n\n        this._eventBus.on('nestDied', this._onNestDied.bind(this));\n    }\n\n    pullStepEvents() {\n        let evetns = this._stepEvents;\n        this._stepEvents = [];\n        return evetns;\n    }\n\n    _onNestDied(nest) {\n        this._stepEvents.push(this._buildEventRecord('nestDied', {nestId: nest.id}));\n    }\n\n    _buildEventRecord(type, data) {\n        return {\n            type,\n            data\n        };\n    }\n}\n\nexport {\n    WorldStepEventsCollector\n}","import { EntityTypes } from './enum/entityTypes';\nimport { World } from './entity/world';\nimport { Nest } from './entity/nest';\nimport { Larva } from './entity/larva';\nimport { AntColony } from './entity/antColony';\nimport { Item } from './entity/item';\nimport { ItemSource } from './entity/itemSource';\nimport { ItemArea } from './entity/itemArea';\nimport { AntTypes } from './enum/antTypes';\nimport { WarriorAnt, WorkerAnt, QueenAnt, MaleAnt } from './entity/ant';\nimport { Egg } from './entity/egg';\nimport { Climate } from './entity/climate';\nimport { Tree } from './entity/tree';\nimport { Ladybug } from './entity/ladybug';\nimport { Genome } from './entity/genetic/genome';\n\nclass WorldFactory {\n\n    constructor(mainEventBus) {\n        this._mainEventBus = mainEventBus;\n    }\n\n    buildEntity(entityJson) {\n        switch(entityJson.type) {\n            case EntityTypes.ANT: \n                return this.buildAnt(entityJson)\n            case EntityTypes.LADYBUG:\n                return this.buildLadybug(entityJson);\n            case EntityTypes.NEST:\n                return this.buildNest(entityJson);\n            case EntityTypes.ITEM:\n                return this.buildItem(entityJson);\n            case EntityTypes.ITEM_SOURCE:\n                return this.buildItemSource(entityJson);\n            case EntityTypes.ITEM_AREA:\n                return this.buildItemArea(entityJson.id, entityJson.position, entityJson.angle, entityJson.hp, entityJson.max_hp);\n            case EntityTypes.TREE:\n                return this.buildTree(entityJson);\n            default:\n                throw 'unknown type of entity';\n        }\n    }\n\n    buildItemArea(id, position, angle, hp, maxHp) {\n        return new ItemArea(this._mainEventBus, id, position, angle, hp, maxHp);\n    }\n\n    buildItemSource(entityJson) {\n        let id = entityJson.id;\n        let position = entityJson.position;\n        let angle = entityJson.angle;\n        let fromColonyId = entityJson.from_colony_id;\n        let hp = entityJson.hp;\n        let maxHp = entityJson.max_hp;\n        let itemType = entityJson.itemType;\n        let isDamaged = entityJson.isDamaged;\n        let accumulated = entityJson.accumulated;\n        let maxAccumulated = entityJson.maxAccumulated;\n        let fertility = entityJson.fertility;\n        return new ItemSource(this._mainEventBus, id, position, angle, fromColonyId, hp, maxHp, itemType, isDamaged, accumulated, maxAccumulated, fertility);\n    }\n\n    buildItem(entityJson) {\n        let id = entityJson.id; \n        let position = entityJson.position;\n        let angle = entityJson.angle;\n        let fromColony = entityJson.from_colony_id;\n        let hp = entityJson.hp;\n        let maxHp = entityJson.max_hp\n        let itemType = entityJson.itemType;\n        let itemVariety = entityJson.variety;\n        let isPicked = entityJson.isPicked;\n        let isBringing = entityJson.isBringing;\n        return new Item(this._mainEventBus, id, position, angle, fromColony, hp, maxHp, itemType, itemVariety, isPicked, isBringing);\n    }\n\n    buildWorld() {\n        let climate = new Climate();\n        return new World(this._mainEventBus, climate);\n    }\n\n    buildLadybug(json) {\n        return new Ladybug(this._mainEventBus, json.id, json.position, json.angle, json.from_colony_id, json.hp, json.max_hp, json.isInHibernation);\n    }\n\n    buildNest(nestJson) {\n        let eggs = [];\n        for (let eggJson of nestJson.eggs) {\n            let egg = Egg.buildFromJson(eggJson);\n            eggs.push(egg);\n        }\n\n        let larvae = [];\n        for (let larvaJson of nestJson.larvae) {\n            let larva = Larva.buildFromJson(larvaJson);\n            larvae.push(larva);\n        }\n\n        let id = nestJson.id;\n        let position = nestJson.position;\n        let angle = nestJson.angle;\n        let fromColonyId = nestJson.from_colony_id;\n        let ownerId = nestJson.owner_id;\n        let storedCalories = nestJson.storedCalories;\n        let isBuilt = nestJson.isBuilt;\n        let hp = nestJson.hp;\n        let maxHp = nestJson.max_hp;\n        let maxFortification = nestJson.maxFortification;\n        let fortification = nestJson.fortification;\n        let name = nestJson.name;\n        let isMain = nestJson.isMain;\n        let area = nestJson.area;\n        return new Nest(this._mainEventBus, id, position, angle, fromColonyId, ownerId, storedCalories, larvae, eggs, isBuilt, \n            hp, maxHp, fortification, maxFortification, name, isMain, area);\n    }\n\n    buildAnt(antJson) {\n        let id = antJson.id;\n        let name = antJson.name;\n        let position = antJson.position;\n        let angle = antJson.angle;\n        let fromColony = antJson.from_colony_id;\n        let ownerId = antJson.owner_id;\n        let hp = antJson.hp;\n        let maxHp = antJson.max_hp;\n        let isInHibernation = antJson.isInHibernation;\n        let pickedItemId = antJson.pickedItemId;\n        let locatedInNestId = antJson.locatedInNestId;\n        let homeNestId = antJson.homeNestId;\n        let stats = antJson.stats;\n        let behavior = antJson.behavior;\n        let genome = Genome.buildFromJson(antJson.genome);\n        let birthStep = antJson.birthStep;\n        let currentActivity = antJson.currentActivity;\n        let isHungry = antJson.isHungry\n\n        switch (antJson.antType) {\n            case AntTypes.QUEEN:\n                let isFertilized = antJson.isFertilized;\n                let isInNuptialFlight = antJson.isInNuptialFlight;\n                let breedingMaleGenome = antJson.breedingMaleGenome ? Genome.buildFromJson(antJson.breedingMaleGenome) : null;\n                return new QueenAnt(this._mainEventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, pickedItemId, locatedInNestId, \n                    homeNestId, stats, behavior, genome, birthStep, currentActivity, isFertilized, isInNuptialFlight, breedingMaleGenome, isHungry);\n            case AntTypes.WARRIOR:\n                return new WarriorAnt(this._mainEventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, pickedItemId, locatedInNestId, \n                    homeNestId, stats, behavior, genome, birthStep, currentActivity, isHungry);\n            case AntTypes.WORKER:\n                return new WorkerAnt(this._mainEventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, pickedItemId, locatedInNestId, \n                    homeNestId, stats, behavior, genome, birthStep, currentActivity, isHungry);\n            case AntTypes.MALE:\n                return new MaleAnt(this._mainEventBus, id, name, position, angle, fromColony, ownerId, hp, maxHp, isInHibernation, pickedItemId, locatedInNestId, \n                    homeNestId, stats, behavior, genome, birthStep, currentActivity, isHungry);\n            default:\n                throw 'unknown type of ant';\n        }\n    }\n\n    buildTree(treeJson) {\n        let id = treeJson.id;\n        let position = treeJson.position;\n        let angle = treeJson.angle;\n        let fromColony = treeJson.fromColony;\n        let ownerId = treeJson.ownerId;\n        let hp = treeJson.hp;\n        let maxHp = treeJson.maxHp;\n        return new Tree(this._mainEventBus, id, position, angle, fromColony, ownerId, hp, maxHp);\n    }\n\n    buildAntColony(colonyJson) {\n        let id = colonyJson.id;\n        let ownerId = colonyJson.owner_id;\n        let name = colonyJson.name;\n        let operations = colonyJson.operations;\n        let enemies = colonyJson.enemies;\n        return new AntColony(this._mainEventBus, id, ownerId, name, operations, enemies);\n    }\n\n}\n\nexport { \n    WorldFactory\n}","import { COMMON_MESSAGE_IDS } from \"@common/messages/messageIds\"\n\nconst GAME_MESSAGE_IDS = {\n    ...COMMON_MESSAGE_IDS,\n    OLD_PASSWORD_NEEDED: 'OLD_PASSWORD_NEEDED',\n    TAB_BREEDING: 'TAB_BREEDING',\n    TAB_COLONIES: 'TAB_COLONIES',\n    TAB_SPECIE: 'TAB_SPECIE',\n    TAB_NOTIFICATIONS: 'TAB_NOTIFICATIONS',\n    TAB_RATING: 'TAB_RATING',\n    TAB_ACCOUNT: 'TAB_ACCOUNT',\n    TAB_HELP: 'TAB_HELP',\n\n    BREEDING_PLACE_TO_SETTLE_NEEDED: 'BREEDING_PLACE_TO_SETTLE_NEEDED',\n    BREEDING_PLACE_TO_SETTLE_BLOCKED: 'BREEDING_PLACE_TO_SETTLE_BLOCKED',\n    BREEDING_QUEEN_NEEDED: 'BREEDING_QUEEN_NEEDED',\n    BREEDING_LIVE_QUEEN_NEEDED: 'BREEDING_LIVE_QUEEN_NEEDED',\n    BREEDING_MALE_NEEDED: 'BREEDING_MALE_NEEDED',\n\n    NEW_SUB_NEST_OPER_CANT_BUILD_SUB_NEST_WITHOUT_QUEEN: 'NEW_SUB_NEST_OPER_CANT_BUILD_SUB_NEST_WITHOUT_QUEEN',\n    NEW_SUB_NEST_OPER_BUILDING_POSITION_NEEDED: 'NEW_SUB_NEST_OPER_BUILDING_POSITION_NEEDED',\n    NEW_SUB_NEST_OPER_BUILDING_POSITION_BLOCKED: 'NEW_SUB_NEST_OPER_BUILDING_POSITION_BLOCKED',\n    NEW_SUB_NEST_OPER_CANT_BUILD_MORE_SUB_NESTS: 'NEW_SUB_NEST_OPER_CANT_BUILD_MORE_SUB_NESTS',\n\n    DESTROY_NEST_OPER_CANT_ATTACK_WITHOUT_QUEEN: 'DESTROY_NEST_OPER_CANT_ATTACK_WITHOUT_QUEEN',\n    DESTROY_NEST_OPER_NEST_NEEDED: 'DESTROY_NEST_OPER_NEST_NEEDED',\n    DESTROY_NEST_OPER_NOT_DESTROYED_NEST_NEEDED: 'DESTROY_NEST_OPER_NOT_DESTROYED_NEST_NEEDED',\n    DESTROY_NEST_OPER_TOO_FEW_ANTS: 'DESTROY_NEST_OPER_TOO_FEW_ANTS',\n\n    PILLAGE_NEST_OPER_CANT_PILLAGE_WITHOUT_QUEEN: 'PILLAGE_NEST_OPER_CANT_PILLAGE_WITHOUT_QUEEN',\n    PILLAGE_NEST_OPER_NEST_TO_PILLAGE_NEEDED: 'PILLAGE_NEST_OPER_NEST_TO_PILLAGE_NEEDED',\n    PILLAGE_NEST_OPER_NOT_DESTROYED_NEST_TO_PILLAGE_NEEDED: 'PILLAGE_NEST_OPER_NOT_DESTROYED_NEST_TO_PILLAGE_NEEDED',\n    PILLAGE_NEST_OPER_NEST_FOR_LOOT_NEEDED: 'PILLAGE_NEST_OPER_NEST_FOR_LOOT_NEEDED',\n\n    TRANSPORT_FOOD_OPER_NEST_FROM_NEEDED: 'TRANSPORT_FOOD_OPER_NEST_FROM_NEEDED',\n    TRANSPORT_FOOD_OPER_NEST_TO_NEEDED: 'TRANSPORT_FOOD_OPER_NEST_TO_NEEDED',\n    TRANSPORT_FOOD_OPER_DIFFERENT_NESTS_NEEDED: 'TRANSPORT_FOOD_OPER_DIFFERENT_NESTS_NEEDED',\n\n    BUILD_FORTIFICATION_OPER_NEST_NEEDED: 'BUILD_FORTIFICATION_OPER_NEST_NEEDED',\n\n    BRING_BUG_OPER_NEST_NEEDED: 'BRING_BUG_OPER_NEST_NEEDED',\n    BRING_BUG_OPER_NO_BUG_FOUND: 'BRING_BUG_OPER_NO_BUG_FOUND',\n\n    NEST_INLINE_NOT_SPECIFIED: 'NEST_INLINE_NOT_SPECIFIED',\n    NEST_INLINE_DESTROYED: 'NEST_INLINE_DESTROYED',\n\n    NEST_SELECTOR_NOT_SELECTED: 'NEST_SELECTOR_NOT_SELECTED',\n\n    INT_INPUT_MIN_MAX: 'INT_FIELD_MIN_MAX',\n    INT_INPUT_MIN: 'INT_FIELD_MIN',\n    INT_INPUT_MAX: 'INT_FIELD_MAX',\n\n    TEXT_INPUT_MIN_STR_LENGTH: 'TEXT_INPUT_MIN_STR_LENGTH',\n    TEXT_INPUT_MAX_STR_LENGTH: 'TEXT_INPUT_MAX_STR_LENGTH',\n    TEXT_INPUT_INVALID_CHAR: 'TEXT_INPUT_INVALID_CHAR',\n\n    POSITION_NOT_SPECIFIED: 'POSITION_NOT_SPECIFIED',\n\n    NOTIFICATION_ANT_DEATH_PLACE: 'NOTIFICATION_ANT_DEATH_PLACE',\n    NOTIFICATION_NEST_DEATH_PLACE: 'NOTIFICATION_NEST_DEATH_PLACE',\n\n    NUPTIAL_TAB_TIME_FULL: 'NUPTIAL_TAB_TIME_FULL',\n    NUPTIAL_TAB_TIME_SHORT: 'NUPTIAL_TAB_TIME_SHORT'\n}\n\nexport {\n    GAME_MESSAGE_IDS\n}","class AntApi {\n\n    constructor(requester) {\n        this._requester = requester;\n    }\n\n    flyNuptialFlight(antId) {\n        return this._requester.post(`/api/world/ants/${ antId }/fly_nuptial_flight`);\n    }\n\n    changeGuardianBehavior(antId, behaviorValue) {\n        return this._requester.post(`/api/world/ants/${ antId }/guardian_behavior`, {\n            guaridan_behavior: behaviorValue\n        });\n    }\n\n    toggleCooperativeBehavior(antId, isEnabled) {\n        return this._requester.post(`/api/world/ants/${ antId }/cooperative_behavior`, {\n            is_enabled: isEnabled\n        });\n    }\n\n    relocateToNest(antId, nestId) {\n        return this._requester.post(`/api/world/ants/${ antId }/relocate`, {\n            nest_id: nestId\n        });\n    }\n}\n\nexport {\n    AntApi\n}","class ColonyApi {\n\n    constructor(requester) {\n        this._requester = requester;\n    }\n\n    stopOperation(colonyId, operationId) {\n        return this._requester.post(`/api/world/colonies/${ colonyId }/operations/${ operationId }/stop_operation`)\n    }\n\n    buildNewSubNestOperation(colonyId, buildingSite, workersCount, warriorsCount, nestName) {\n        return this._requester.post(`/api/world/colonies/${ colonyId }/operations/build_new_sub_nest`, {\n            building_site: [buildingSite.x, buildingSite.y],\n            workers_count: workersCount,\n            warriors_count: warriorsCount,\n            nest_name: nestName\n        });\n    }\n\n    destroyNestOperation(colonyId, warriorsCount, workersCount, nestId) {\n        return this._requester.post(`/api/world/colonies/${ colonyId }/operations/destroy_nest`, {\n            warriors_count: warriorsCount,\n            workers_count: workersCount,\n            nest_id: nestId\n        });\n    }\n\n    pillageNestOperation(colonyId, pillagingNestId, nestForLootId, warriorsCount, workersCount) {\n        return this._requester.post(`/api/world/colonies/${ colonyId }/operations/pillage_nest`, {\n            nest_to_pillage_id: pillagingNestId,\n            nest_for_loot_id: nestForLootId,\n            warriors_count: warriorsCount,\n            workers_count: workersCount\n        });\n        \n    }\n\n    transportFoodOperation(colonyId, fromNestId, toNestId, workersCount, warriorsCount) {\n        return this._requester.post(`/api/world/colonies/${ colonyId }/operations/transport_food`, {\n            from_nest_id: fromNestId,\n            to_nest_id: toNestId,\n            workers_count: workersCount,\n            warriors_count: warriorsCount,\n        });\n    }\n\n    buildFortificationsOpearation(colonyId, nestId, workersCount) {\n        return this._requester.post(`/api/world/colonies/${ colonyId }/operations/build_fortification`, {\n            nest_id: nestId,\n            workers_count: workersCount\n        });\n    }\n\n    bringBugOpearation(colonyId, nestId) {\n        return this._requester.post(`/api/world/colonies/${ colonyId }/operations/bring_bug`, {\n            nest_id: nestId\n        });\n    }\n}\n\nexport {\n    ColonyApi\n}","class NestApi {\n\n    constructor(requester) {\n        this._requester = requester;\n    }\n\n    layEggInNest(nestId, name, isFertilized) {\n        return this._requester.post(`/api/world/nests/${nestId}/lay_egg`, {\n            name,\n            is_fertilized: isFertilized\n        })\n    }\n\n    changeEggCaste(nestId, eggId, antType) {\n        return this._requester.post(`/api/world/nests/${nestId}/eggs/${eggId}/change_caste`, {\n            ant_type: antType\n        });\n    }\n\n    changeEggName(nestId, eggId, name) {\n        return this._requester.post(`/api/world/nests/${nestId}/eggs/${eggId}/change_name`, {\n            name: name\n        });\n    }\n\n    eggToLarvaChamber(nestId, eggId) {\n        return this._requester.post(`/api/world/nests/${nestId}/eggs/${eggId}/move_to_larva_chamber`);\n    }\n\n    eggDelete(nestId, eggId) {\n        return this._requester.post(`/api/world/nests/${nestId}/eggs/${eggId}/delete`);\n    }\n\n    larvaDelete(nestId, larvaId) {\n        return this._requester.post(`/api/world/nests/${nestId}/larvae/${larvaId}/delete`);\n    }\n\n    renameNest(nestId, name) {\n        return this._requester.post(`/api/world/nests/${nestId}/rename`, {\n            name: name\n        });\n    }\n\n}\n\nexport {\n    NestApi\n}","class NuptialEnvironmentApi {\n\n    constructor(requester) {\n        this._requester = requester;\n    }\n\n    saveSpecieSchema(specieSchema) {\n        this._requester.post('/api/world/nuptial_environment/specie/specie_schema', {\n            specie_schema: specieSchema\n        });\n    }\n\n    foundColony(queenId, nuptialMaleId, nestBuildingSite, colonyName) {\n        return this._requester.post('/api/world/nuptial_environment/found_colony', {\n            queen_id: queenId,\n            nuptial_male_id: nuptialMaleId,\n            nest_building_site: [nestBuildingSite.x, nestBuildingSite.y],\n            colony_name: colonyName\n        });\n    }\n\n    bornNewAntara() {\n        return this._requester.post(`/api/world/nuptial_environment/born_new_antara`);\n    }\n    \n}\n\nexport {\n    NuptialEnvironmentApi\n}","import { EventEmitter } from \"@common/utils/eventEmitter\";\n\nclass ServerConnection {\n\n    constructor() {\n        this.events = new EventEmitter();\n    }\n\n    connect(socketURL) {\n        return new Promise((res) => {\n            this._socket = new WebSocket(socketURL);\n            this._socket.onmessage = this._emitMessage.bind(this);\n            this._socket.onopen = () => {\n                res();\n            }\n        });\n    }\n\n    disconnect() {\n        this._socket.close();\n    }\n\n    send(msg) {\n        this._socket.send(JSON.stringify(msg));\n    }\n\n    _emitMessage(event) {\n        this.events.emit('message', JSON.parse(event.data));\n    }\n}\n\nexport {\n    ServerConnection\n}","function distance(x1, y1, x2, y2) {\n    return Math.sqrt(Math.pow((x1  -x2), 2) + Math.pow((y1 - y2), 2));\n}\n\nfunction distance_point(point1, point2) {\n    return distance(point1.x, point1.y, point2.x, point2.y)\n}\n\nexport {\n    distance,\n    distance_point\n}","import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport fetchAdapter from './fetch.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter,\n  fetch: fetchAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n","import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport {trackStream} from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\n\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\n);\n\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false\n  }\n}\n\nconst supportsRequestStream = isReadableStreamSupported && test(() => {\n  let duplexAccessed = false;\n\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    },\n  }).headers.has('Content-Type');\n\n  return duplexAccessed && !hasContentType;\n});\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst supportsResponseStream = isReadableStreamSupported &&\n  test(() => utils.isReadableStream(new Response('').body));\n\n\nconst resolvers = {\n  stream: supportsResponseStream && ((res) => res.body)\n};\n\nisFetchSupported && (((res) => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :\n      (_, config) => {\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      })\n  });\n})(new Response));\n\nconst getBodyLength = async (body) => {\n  if (body == null) {\n    return 0;\n  }\n\n  if(utils.isBlob(body)) {\n    return body.size;\n  }\n\n  if(utils.isSpecCompliantForm(body)) {\n    const _request = new Request(platform.origin, {\n      method: 'POST',\n      body,\n    });\n    return (await _request.arrayBuffer()).byteLength;\n  }\n\n  if(utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {\n    return body.byteLength;\n  }\n\n  if(utils.isURLSearchParams(body)) {\n    body = body + '';\n  }\n\n  if(utils.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n}\n\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils.toFiniteNumber(headers.getContentLength());\n\n  return length == null ? getBodyLength(body) : length;\n}\n\nexport default isFetchSupported && (async (config) => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n\n  let request;\n\n  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {\n      composedSignal.unsubscribe();\n  });\n\n  let requestContentLength;\n\n  try {\n    if (\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n    ) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n\n      let contentTypeHeader;\n\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader)\n      }\n\n      if (_request.body) {\n        const [onProgress, flush] = progressEventDecorator(\n          requestContentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress))\n        );\n\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n      }\n    }\n\n    if (!utils.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'include' : 'omit';\n    }\n\n    // Cloudflare Workers throws when credentials are defined\n    // see https://github.com/cloudflare/workerd/issues/902\n    const isCredentialsSupported = \"credentials\" in Request.prototype;\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      credentials: isCredentialsSupported ? withCredentials : undefined\n    });\n\n    let response = await fetch(request);\n\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {\n      const options = {};\n\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n\n      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(\n        responseContentLength,\n        progressEventReducer(asyncDecorator(onDownloadProgress), true)\n      ) || [];\n\n      response = new Response(\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n          flush && flush();\n          unsubscribe && unsubscribe();\n        }),\n        options\n      );\n    }\n\n    responseType = responseType || 'text';\n\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n\n    !isStreamResponse && unsubscribe && unsubscribe();\n\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      })\n    })\n  } catch (err) {\n    unsubscribe && unsubscribe();\n\n    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {\n      throw Object.assign(\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n        {\n          cause: err.cause || err\n        }\n      )\n    }\n\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});\n\n\n","import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport {progressEventReducer} from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {responseType, onUploadProgress, onDownloadProgress} = _config;\n    let onCanceled;\n    let uploadThrottled, downloadThrottled;\n    let flushUpload, flushDownload;\n\n    function done() {\n      flushUpload && flushUpload(); // flush events\n      flushDownload && flushDownload(); // flush events\n\n      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n\n      _config.signal && _config.signal.removeEventListener('abort', onCanceled);\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (onDownloadProgress) {\n      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));\n      request.addEventListener('progress', downloadThrottled);\n    }\n\n    // Not all browsers support upload events\n    if (onUploadProgress && request.upload) {\n      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));\n\n      request.upload.addEventListener('progress', uploadThrottled);\n\n      request.upload.addEventListener('loadend', flushUpload);\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n","'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport adapters from './adapters/adapters.js';\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n","'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  toAbortSignal() {\n    const controller = new AbortController();\n\n    const abort = (err) => {\n      controller.abort(err);\n    };\n\n    this.subscribe(abort);\n\n    controller.signal.unsubscribe = () => this.unsubscribe(abort);\n\n    return controller.signal;\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n","'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n","'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy = {};\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.allowAbsoluteUrls\n    if (config.allowAbsoluteUrls !== undefined) {\n      // do nothing\n    } else if (this.defaults.allowAbsoluteUrls !== undefined) {\n      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;\n    } else {\n      config.allowAbsoluteUrls = true;\n    }\n\n    validator.assertOptions(config, {\n      baseUrl: validators.spelling('baseURL'),\n      withXsrfToken: validators.spelling('withXSRFToken')\n    }, true);\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  if (response) {\n    this.response = response;\n    this.status = response.status ? response.status : null;\n  }\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.status\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n","'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else if (utils.isHeaders(header)) {\n      for (const [key, value] of header.entries()) {\n        setHeader(value, key, rewrite);\n      }\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n","'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n","'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {\n  let isRelativeUrl = !isAbsoluteURL(requestedURL);\n  if (baseURL && isRelativeUrl || allowAbsoluteUrls == false) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n","'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, prop, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, prop , caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, prop , caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, prop , caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n","'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http', 'fetch'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data) ||\n      utils.isReadableStream(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (utils.isResponse(data) || utils.isReadableStream(data)) {\n      return data;\n    }\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nexport default defaults;\n","'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","export const VERSION = \"1.8.3\";","'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n","const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n","'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?(object|Function)} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  if (utils.isFunction(options)) {\n    options = {\n      serialize: options\n    };\n  } \n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/?\\/$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n","import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport utils from '../utils.js';\n\nconst composeSignals = (signals, timeout) => {\n  const {length} = (signals = signals ? signals.filter(Boolean) : []);\n\n  if (timeout || length) {\n    let controller = new AbortController();\n\n    let aborted;\n\n    const onabort = function (reason) {\n      if (!aborted) {\n        aborted = true;\n        unsubscribe();\n        const err = reason instanceof Error ? reason : this.reason;\n        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n      }\n    }\n\n    let timer = timeout && setTimeout(() => {\n      timer = null;\n      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT))\n    }, timeout)\n\n    const unsubscribe = () => {\n      if (signals) {\n        timer && clearTimeout(timer);\n        timer = null;\n        signals.forEach(signal => {\n          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);\n        });\n        signals = null;\n      }\n    }\n\n    signals.forEach((signal) => signal.addEventListener('abort', onabort));\n\n    const {signal} = controller;\n\n    signal.unsubscribe = () => utils.asap(unsubscribe);\n\n    return signal;\n  }\n}\n\nexport default composeSignals;\n","import utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n  // Standard browser envs support document.cookie\n  {\n    write(name, value, expires, path, domain, secure) {\n      const cookie = [name + '=' + encodeURIComponent(value)];\n\n      utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());\n\n      utils.isString(path) && cookie.push('path=' + path);\n\n      utils.isString(domain) && cookie.push('domain=' + domain);\n\n      secure === true && cookie.push('secure');\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read(name) {\n      const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return (match ? decodeURIComponent(match[3]) : null);\n    },\n\n    remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  }\n\n  :\n\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {},\n    read() {\n      return null;\n    },\n    remove() {}\n  };\n\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n\n    if (name === '__proto__') return true;\n\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n","import platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {\n  url = new URL(url, platform.origin);\n\n  return (\n    origin.protocol === url.protocol &&\n    origin.host === url.host &&\n    (isMSIE || origin.port === url.port)\n  );\n})(\n  new URL(platform.origin),\n  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)\n) : () => true;\n","// eslint-disable-next-line strict\nexport default null;\n","'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n","import speedometer from \"./speedometer.js\";\nimport throttle from \"./throttle.js\";\nimport utils from \"../utils.js\";\n\nexport const progressEventReducer = (listener, isDownloadStream, freq = 3) => {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null,\n      [isDownloadStream ? 'download' : 'upload']: true\n    };\n\n    listener(data);\n  }, freq);\n}\n\nexport const progressEventDecorator = (total, throttled) => {\n  const lengthComputable = total != null;\n\n  return [(loaded) => throttled[0]({\n    lengthComputable,\n    total,\n    loaded\n  }), throttled[1]];\n}\n\nexport const asyncDecorator = (fn) => (...args) => utils.asap(() => fn(...args));\n","import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n","'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n","/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    fn.apply(null, args);\n  }\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n    if ( passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs)\n        }, threshold - passed);\n      }\n    }\n  }\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nexport default throttle;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n","'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n","\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n}\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n  try {\n    for (;;) {\n      const {done, value} = await reader.read();\n      if (done) {\n        break;\n      }\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n","'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\nvalidators.spelling = function spelling(correctSpelling) {\n  return (value, opt) => {\n    // eslint-disable-next-line no-console\n    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);\n    return true;\n  }\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n","'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n","'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n","'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n","import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n","const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nconst _navigator = typeof navigator === 'object' && navigator || undefined;\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = hasBrowserEnv &&\n  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\n\nexport {\n  hasBrowserEnv,\n  hasStandardBrowserWebWorkerEnv,\n  hasStandardBrowserEnv,\n  _navigator as navigator,\n  origin\n}\n","import platform from './node/index.js';\nimport * as utils from './common/utils.js';\n\nexport default {\n  ...utils,\n  ...platform\n}\n","'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\nconst [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\n// original code\n// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34\n\nconst _setImmediate = ((setImmediateSupported, postMessageSupported) => {\n  if (setImmediateSupported) {\n    return setImmediate;\n  }\n\n  return postMessageSupported ? ((token, callbacks) => {\n    _global.addEventListener(\"message\", ({source, data}) => {\n      if (source === _global && data === token) {\n        callbacks.length && callbacks.shift()();\n      }\n    }, false);\n\n    return (cb) => {\n      callbacks.push(cb);\n      _global.postMessage(token, \"*\");\n    }\n  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);\n})(\n  typeof setImmediate === 'function',\n  isFunction(_global.postMessage)\n);\n\nconst asap = typeof queueMicrotask !== 'undefined' ?\n  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);\n\n// *********************\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isReadableStream,\n  isRequest,\n  isResponse,\n  isHeaders,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable,\n  setImmediate: _setImmediate,\n  asap\n};\n","export let createNanoEvents = () => ({\n  emit(event, ...args) {\n    for (\n      let callbacks = this.events[event] || [],\n        i = 0,\n        length = callbacks.length;\n      i < length;\n      i++\n    ) {\n      callbacks[i](...args)\n    }\n  },\n  events: {},\n  on(event, cb) {\n    ;(this.events[event] ||= []).push(cb)\n    return () => {\n      this.events[event] = this.events[event]?.filter(i => cb !== i)\n    }\n  }\n})\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Requester } from \"@common/utils/requester\";\nimport { AccountApi } from \"@common/sync/accountApi\";\nimport { ServerConnection } from \"./sync/serverConnection\";\nimport { NestApi } from \"./sync/nestApi\";\nimport { ColonyApi } from \"./sync/colonyApi\";\nimport { AntApi } from \"./sync/antApi\";\nimport { NuptialEnvironmentApi } from \"./sync/nuptialEnvironmentApi\";\n\nimport { AccountService } from '@common/domain/service/accountService';\nimport { MessageHandlerService } from \"@domain/service/messageHandlerService\";\nimport { EventEmitter } from '@common/utils/eventEmitter';\nimport { WorldFactory } from \"@domain/worldFactory\";\nimport { WorldService } from \"@domain/service/worldService\";\nimport { ColonyService } from \"@domain/service/colonyService\";\nimport { UserService } from \"@domain/service/userService\";\nimport { NuptialEnvironmentService } from \"@domain/service/nuptialEnvironmentService\";\nimport { NestService } from \"@domain/service/nestService\";\nimport { AntService } from \"@domain/service/antService\";\n\nimport { NuptialEnvironment } from \"@domain/entity/nuptialEnvironment\";\n\nimport { EntitySerializer } from \"./domain/worker/serializers/entitySerializer\";\nimport { ColonySerializer } from \"@domain/worker/serializers/colonySerializer\";\n\nimport { MyStateCollector } from \"@domain/worker/myStateCollector\";\nimport { WorldStepEventsCollector } from \"@domain/worker/worldStepEventsCollector\";\nimport { ViewPointManager } from \"@domain/worker/viewPointManager\";\nimport { DomainWorker } from \"./domain/worker/domainWorker\";\n\nlet requester = new Requester();\nlet serverConnection = new ServerConnection();\nlet accountApi = new AccountApi(requester);\nlet nestApi = new NestApi(requester);\nlet colonyApi = new ColonyApi(requester);\nlet antApi = new AntApi(requester);\nlet nuptialEnvironmentApi = new NuptialEnvironmentApi(requester)\n\nlet eventBus = new EventEmitter();\nlet worldFactory = new WorldFactory(eventBus);\nlet world = worldFactory.buildWorld();\nlet nuptialEnv = NuptialEnvironment.build();\nlet worldService = new WorldService(world, worldFactory, eventBus);\nlet accountService = new AccountService(accountApi);\nlet colonyService = new ColonyService(eventBus, world, colonyApi, worldFactory);\nlet userService = new UserService(eventBus, world);\nlet nuptialEnvironmentService = new NuptialEnvironmentService(eventBus, world, nuptialEnv, nuptialEnvironmentApi);\nlet nestService = new NestService(eventBus, world, nestApi);\nlet antService = new AntService(eventBus, world, antApi);\nlet messageHandlerService = new MessageHandlerService(eventBus, serverConnection, worldService, colonyService, userService, nuptialEnvironmentService, accountService);\n\nlet entitySerializer = new EntitySerializer();\nlet colonySerializer = new ColonySerializer();\n\nlet viewPointManager = new ViewPointManager();\nlet myStateCollector = new MyStateCollector(eventBus, world, nuptialEnv, userService, entitySerializer, colonySerializer);\nlet worldStepEventsCollector = new WorldStepEventsCollector(eventBus);\nnew DomainWorker(eventBus, entitySerializer, viewPointManager, requester, myStateCollector, worldStepEventsCollector, {\n    worldService,\n    accountService,\n    colonyService,\n    userService,\n    nuptialEnvironmentService,\n    nestService,\n    antService,\n    messageHandlerService\n});"],"names":[],"sourceRoot":""}